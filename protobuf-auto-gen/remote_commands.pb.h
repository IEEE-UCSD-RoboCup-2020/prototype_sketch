// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remote_5fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remote_5fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remote_5fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_5fcommands_2eproto;
class Control;
class ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
class Custom_Control;
class Custom_ControlDefaultTypeInternal;
extern Custom_ControlDefaultTypeInternal _Custom_Control_default_instance_;
class Custom_Task;
class Custom_TaskDefaultTypeInternal;
extern Custom_TaskDefaultTypeInternal _Custom_Task_default_instance_;
class Data_Request;
class Data_RequestDefaultTypeInternal;
extern Data_RequestDefaultTypeInternal _Data_Request_default_instance_;
class Data_Send;
class Data_SendDefaultTypeInternal;
extern Data_SendDefaultTypeInternal _Data_Send_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Remote_Commands;
class Remote_CommandsDefaultTypeInternal;
extern Remote_CommandsDefaultTypeInternal _Remote_Commands_default_instance_;
class Static_Data;
class Static_DataDefaultTypeInternal;
extern Static_DataDefaultTypeInternal _Static_Data_default_instance_;
class Vec2D;
class Vec2DDefaultTypeInternal;
extern Vec2DDefaultTypeInternal _Vec2D_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Control* Arena::CreateMaybeMessage<::Control>(Arena*);
template<> ::Custom_Control* Arena::CreateMaybeMessage<::Custom_Control>(Arena*);
template<> ::Custom_Task* Arena::CreateMaybeMessage<::Custom_Task>(Arena*);
template<> ::Data_Request* Arena::CreateMaybeMessage<::Data_Request>(Arena*);
template<> ::Data_Send* Arena::CreateMaybeMessage<::Data_Send>(Arena*);
template<> ::Polygon* Arena::CreateMaybeMessage<::Polygon>(Arena*);
template<> ::Remote_Commands* Arena::CreateMaybeMessage<::Remote_Commands>(Arena*);
template<> ::Static_Data* Arena::CreateMaybeMessage<::Static_Data>(Arena*);
template<> ::Vec2D* Arena::CreateMaybeMessage<::Vec2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vec2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vec2D) */ {
 public:
  Vec2D();
  virtual ~Vec2D();

  Vec2D(const Vec2D& from);
  Vec2D(Vec2D&& from) noexcept
    : Vec2D() {
    *this = ::std::move(from);
  }

  inline Vec2D& operator=(const Vec2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2D& operator=(Vec2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec2D* internal_default_instance() {
    return reinterpret_cast<const Vec2D*>(
               &_Vec2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec2D& a, Vec2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2D* New() const final {
    return CreateMaybeMessage<Vec2D>(nullptr);
  }

  Vec2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec2D& from);
  void MergeFrom(const Vec2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vec2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vec2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .Vec2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::Vec2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >*
      mutable_vertices();
  private:
  const ::Vec2D& _internal_vertices(int index) const;
  ::Vec2D* _internal_add_vertices();
  public:
  const ::Vec2D& vertices(int index) const;
  ::Vec2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Static_Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Static_Data) */ {
 public:
  Static_Data();
  virtual ~Static_Data();

  Static_Data(const Static_Data& from);
  Static_Data(Static_Data&& from) noexcept
    : Static_Data() {
    *this = ::std::move(from);
  }

  inline Static_Data& operator=(const Static_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Static_Data& operator=(Static_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Static_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Static_Data* internal_default_instance() {
    return reinterpret_cast<const Static_Data*>(
               &_Static_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Static_Data& a, Static_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Static_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Static_Data* New() const final {
    return CreateMaybeMessage<Static_Data>(nullptr);
  }

  Static_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Static_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Static_Data& from);
  void MergeFrom(const Static_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Static_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Static_Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayAreaFieldNumber = 1,
    kPenaltyAreaFieldNumber = 2,
    kCenterCircleFieldNumber = 3,
    kCenterLineFieldNumber = 4,
    kCrossBarFieldNumber = 5,
    kNumRobotsFieldNumber = 6,
  };
  // .Polygon play_area = 1;
  bool has_play_area() const;
  private:
  bool _internal_has_play_area() const;
  public:
  void clear_play_area();
  const ::Polygon& play_area() const;
  ::Polygon* release_play_area();
  ::Polygon* mutable_play_area();
  void set_allocated_play_area(::Polygon* play_area);
  private:
  const ::Polygon& _internal_play_area() const;
  ::Polygon* _internal_mutable_play_area();
  public:

  // .Polygon penalty_area = 2;
  bool has_penalty_area() const;
  private:
  bool _internal_has_penalty_area() const;
  public:
  void clear_penalty_area();
  const ::Polygon& penalty_area() const;
  ::Polygon* release_penalty_area();
  ::Polygon* mutable_penalty_area();
  void set_allocated_penalty_area(::Polygon* penalty_area);
  private:
  const ::Polygon& _internal_penalty_area() const;
  ::Polygon* _internal_mutable_penalty_area();
  public:

  // .Polygon center_circle = 3;
  bool has_center_circle() const;
  private:
  bool _internal_has_center_circle() const;
  public:
  void clear_center_circle();
  const ::Polygon& center_circle() const;
  ::Polygon* release_center_circle();
  ::Polygon* mutable_center_circle();
  void set_allocated_center_circle(::Polygon* center_circle);
  private:
  const ::Polygon& _internal_center_circle() const;
  ::Polygon* _internal_mutable_center_circle();
  public:

  // .Polygon center_line = 4;
  bool has_center_line() const;
  private:
  bool _internal_has_center_line() const;
  public:
  void clear_center_line();
  const ::Polygon& center_line() const;
  ::Polygon* release_center_line();
  ::Polygon* mutable_center_line();
  void set_allocated_center_line(::Polygon* center_line);
  private:
  const ::Polygon& _internal_center_line() const;
  ::Polygon* _internal_mutable_center_line();
  public:

  // .Polygon cross_bar = 5;
  bool has_cross_bar() const;
  private:
  bool _internal_has_cross_bar() const;
  public:
  void clear_cross_bar();
  const ::Polygon& cross_bar() const;
  ::Polygon* release_cross_bar();
  ::Polygon* mutable_cross_bar();
  void set_allocated_cross_bar(::Polygon* cross_bar);
  private:
  const ::Polygon& _internal_cross_bar() const;
  ::Polygon* _internal_mutable_cross_bar();
  public:

  // int32 num_robots = 6;
  void clear_num_robots();
  ::PROTOBUF_NAMESPACE_ID::int32 num_robots() const;
  void set_num_robots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_robots() const;
  void _internal_set_num_robots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Static_Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Polygon* play_area_;
  ::Polygon* penalty_area_;
  ::Polygon* center_circle_;
  ::Polygon* center_line_;
  ::Polygon* cross_bar_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_robots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Control :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Control) */ {
 public:
  Control();
  virtual ~Control();

  Control(const Control& from);
  Control(Control&& from) noexcept
    : Control() {
    *this = ::std::move(from);
  }

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control& operator=(Control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Control& a, Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Control* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Control* New() const final {
    return CreateMaybeMessage<Control>(nullptr);
  }

  Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Control>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Control";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
    kDribblerPwrFieldNumber = 3,
    kKickerPwrFieldNumber = 4,
    kChipppingPwrFieldNumber = 5,
  };
  // .Vec2D velocity = 1;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Vec2D& velocity() const;
  ::Vec2D* release_velocity();
  ::Vec2D* mutable_velocity();
  void set_allocated_velocity(::Vec2D* velocity);
  private:
  const ::Vec2D& _internal_velocity() const;
  ::Vec2D* _internal_mutable_velocity();
  public:

  // float angular_velocity = 2;
  void clear_angular_velocity();
  float angular_velocity() const;
  void set_angular_velocity(float value);
  private:
  float _internal_angular_velocity() const;
  void _internal_set_angular_velocity(float value);
  public:

  // float dribbler_pwr = 3;
  void clear_dribbler_pwr();
  float dribbler_pwr() const;
  void set_dribbler_pwr(float value);
  private:
  float _internal_dribbler_pwr() const;
  void _internal_set_dribbler_pwr(float value);
  public:

  // float kicker_pwr = 4;
  void clear_kicker_pwr();
  float kicker_pwr() const;
  void set_kicker_pwr(float value);
  private:
  float _internal_kicker_pwr() const;
  void _internal_set_kicker_pwr(float value);
  public:

  // float chippping_pwr = 5;
  void clear_chippping_pwr();
  float chippping_pwr() const;
  void set_chippping_pwr(float value);
  private:
  float _internal_chippping_pwr() const;
  void _internal_set_chippping_pwr(float value);
  public:

  // @@protoc_insertion_point(class_scope:Control)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Vec2D* velocity_;
  float angular_velocity_;
  float dribbler_pwr_;
  float kicker_pwr_;
  float chippping_pwr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Data_Send :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data_Send) */ {
 public:
  Data_Send();
  virtual ~Data_Send();

  Data_Send(const Data_Send& from);
  Data_Send(Data_Send&& from) noexcept
    : Data_Send() {
    *this = ::std::move(from);
  }

  inline Data_Send& operator=(const Data_Send& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data_Send& operator=(Data_Send&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data_Send& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data_Send* internal_default_instance() {
    return reinterpret_cast<const Data_Send*>(
               &_Data_Send_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Data_Send& a, Data_Send& b) {
    a.Swap(&b);
  }
  inline void Swap(Data_Send* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data_Send* New() const final {
    return CreateMaybeMessage<Data_Send>(nullptr);
  }

  Data_Send* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data_Send>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data_Send& from);
  void MergeFrom(const Data_Send& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data_Send* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data_Send";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotLocationsFieldNumber = 2,
    kRobotOrientationsFieldNumber = 3,
    kRobotVelocitiesFieldNumber = 4,
    kBallLocationFieldNumber = 1,
  };
  // repeated .Vec2D robot_locations = 2;
  int robot_locations_size() const;
  private:
  int _internal_robot_locations_size() const;
  public:
  void clear_robot_locations();
  ::Vec2D* mutable_robot_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >*
      mutable_robot_locations();
  private:
  const ::Vec2D& _internal_robot_locations(int index) const;
  ::Vec2D* _internal_add_robot_locations();
  public:
  const ::Vec2D& robot_locations(int index) const;
  ::Vec2D* add_robot_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >&
      robot_locations() const;

  // repeated float robot_orientations = 3;
  int robot_orientations_size() const;
  private:
  int _internal_robot_orientations_size() const;
  public:
  void clear_robot_orientations();
  private:
  float _internal_robot_orientations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_robot_orientations() const;
  void _internal_add_robot_orientations(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_robot_orientations();
  public:
  float robot_orientations(int index) const;
  void set_robot_orientations(int index, float value);
  void add_robot_orientations(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      robot_orientations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_robot_orientations();

  // repeated .Vec2D robot_velocities = 4;
  int robot_velocities_size() const;
  private:
  int _internal_robot_velocities_size() const;
  public:
  void clear_robot_velocities();
  ::Vec2D* mutable_robot_velocities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >*
      mutable_robot_velocities();
  private:
  const ::Vec2D& _internal_robot_velocities(int index) const;
  ::Vec2D* _internal_add_robot_velocities();
  public:
  const ::Vec2D& robot_velocities(int index) const;
  ::Vec2D* add_robot_velocities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >&
      robot_velocities() const;

  // .Vec2D ball_location = 1;
  bool has_ball_location() const;
  private:
  bool _internal_has_ball_location() const;
  public:
  void clear_ball_location();
  const ::Vec2D& ball_location() const;
  ::Vec2D* release_ball_location();
  ::Vec2D* mutable_ball_location();
  void set_allocated_ball_location(::Vec2D* ball_location);
  private:
  const ::Vec2D& _internal_ball_location() const;
  ::Vec2D* _internal_mutable_ball_location();
  public:

  // @@protoc_insertion_point(class_scope:Data_Send)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D > robot_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > robot_orientations_;
  mutable std::atomic<int> _robot_orientations_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D > robot_velocities_;
  ::Vec2D* ball_location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Custom_Control :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Custom_Control) */ {
 public:
  Custom_Control();
  virtual ~Custom_Control();

  Custom_Control(const Custom_Control& from);
  Custom_Control(Custom_Control&& from) noexcept
    : Custom_Control() {
    *this = ::std::move(from);
  }

  inline Custom_Control& operator=(const Custom_Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Custom_Control& operator=(Custom_Control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Custom_Control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Custom_Control* internal_default_instance() {
    return reinterpret_cast<const Custom_Control*>(
               &_Custom_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Custom_Control& a, Custom_Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Custom_Control* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Custom_Control* New() const final {
    return CreateMaybeMessage<Custom_Control>(nullptr);
  }

  Custom_Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Custom_Control>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Custom_Control& from);
  void MergeFrom(const Custom_Control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Custom_Control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Custom_Control";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumericalParamsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated float numerical_params = 2;
  int numerical_params_size() const;
  private:
  int _internal_numerical_params_size() const;
  public:
  void clear_numerical_params();
  private:
  float _internal_numerical_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_numerical_params() const;
  void _internal_add_numerical_params(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_numerical_params();
  public:
  float numerical_params(int index) const;
  void set_numerical_params(int index, float value);
  void add_numerical_params(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      numerical_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_numerical_params();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Custom_Control)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > numerical_params_;
  mutable std::atomic<int> _numerical_params_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Custom_Task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Custom_Task) */ {
 public:
  Custom_Task();
  virtual ~Custom_Task();

  Custom_Task(const Custom_Task& from);
  Custom_Task(Custom_Task&& from) noexcept
    : Custom_Task() {
    *this = ::std::move(from);
  }

  inline Custom_Task& operator=(const Custom_Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Custom_Task& operator=(Custom_Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Custom_Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Custom_Task* internal_default_instance() {
    return reinterpret_cast<const Custom_Task*>(
               &_Custom_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Custom_Task& a, Custom_Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Custom_Task* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Custom_Task* New() const final {
    return CreateMaybeMessage<Custom_Task>(nullptr);
  }

  Custom_Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Custom_Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Custom_Task& from);
  void MergeFrom(const Custom_Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Custom_Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Custom_Task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlParamsFieldNumber = 2,
    kNumericalParamsFieldNumber = 3,
    kStrParamsFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated .Control ctrl_params = 2;
  int ctrl_params_size() const;
  private:
  int _internal_ctrl_params_size() const;
  public:
  void clear_ctrl_params();
  ::Control* mutable_ctrl_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >*
      mutable_ctrl_params();
  private:
  const ::Control& _internal_ctrl_params(int index) const;
  ::Control* _internal_add_ctrl_params();
  public:
  const ::Control& ctrl_params(int index) const;
  ::Control* add_ctrl_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >&
      ctrl_params() const;

  // repeated float numerical_params = 3;
  int numerical_params_size() const;
  private:
  int _internal_numerical_params_size() const;
  public:
  void clear_numerical_params();
  private:
  float _internal_numerical_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_numerical_params() const;
  void _internal_add_numerical_params(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_numerical_params();
  public:
  float numerical_params(int index) const;
  void set_numerical_params(int index, float value);
  void add_numerical_params(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      numerical_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_numerical_params();

  // repeated string str_params = 4;
  int str_params_size() const;
  private:
  int _internal_str_params_size() const;
  public:
  void clear_str_params();
  const std::string& str_params(int index) const;
  std::string* mutable_str_params(int index);
  void set_str_params(int index, const std::string& value);
  void set_str_params(int index, std::string&& value);
  void set_str_params(int index, const char* value);
  void set_str_params(int index, const char* value, size_t size);
  std::string* add_str_params();
  void add_str_params(const std::string& value);
  void add_str_params(std::string&& value);
  void add_str_params(const char* value);
  void add_str_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_params();
  private:
  const std::string& _internal_str_params(int index) const;
  std::string* _internal_add_str_params();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Custom_Task)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control > ctrl_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > numerical_params_;
  mutable std::atomic<int> _numerical_params_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Data_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data_Request) */ {
 public:
  Data_Request();
  virtual ~Data_Request();

  Data_Request(const Data_Request& from);
  Data_Request(Data_Request&& from) noexcept
    : Data_Request() {
    *this = ::std::move(from);
  }

  inline Data_Request& operator=(const Data_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data_Request& operator=(Data_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data_Request* internal_default_instance() {
    return reinterpret_cast<const Data_Request*>(
               &_Data_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Data_Request& a, Data_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Data_Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data_Request* New() const final {
    return CreateMaybeMessage<Data_Request>(nullptr);
  }

  Data_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data_Request& from);
  void MergeFrom(const Data_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data_Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlDataFieldNumber = 2,
    kNumericalDataFieldNumber = 3,
    kStrDataFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated .Control ctrl_data = 2;
  int ctrl_data_size() const;
  private:
  int _internal_ctrl_data_size() const;
  public:
  void clear_ctrl_data();
  ::Control* mutable_ctrl_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >*
      mutable_ctrl_data();
  private:
  const ::Control& _internal_ctrl_data(int index) const;
  ::Control* _internal_add_ctrl_data();
  public:
  const ::Control& ctrl_data(int index) const;
  ::Control* add_ctrl_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >&
      ctrl_data() const;

  // repeated float numerical_data = 3;
  int numerical_data_size() const;
  private:
  int _internal_numerical_data_size() const;
  public:
  void clear_numerical_data();
  private:
  float _internal_numerical_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_numerical_data() const;
  void _internal_add_numerical_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_numerical_data();
  public:
  float numerical_data(int index) const;
  void set_numerical_data(int index, float value);
  void add_numerical_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      numerical_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_numerical_data();

  // repeated string str_data = 4;
  int str_data_size() const;
  private:
  int _internal_str_data_size() const;
  public:
  void clear_str_data();
  const std::string& str_data(int index) const;
  std::string* mutable_str_data(int index);
  void set_str_data(int index, const std::string& value);
  void set_str_data(int index, std::string&& value);
  void set_str_data(int index, const char* value);
  void set_str_data(int index, const char* value, size_t size);
  std::string* add_str_data();
  void add_str_data(const std::string& value);
  void add_str_data(std::string&& value);
  void add_str_data(const char* value);
  void add_str_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_data();
  private:
  const std::string& _internal_str_data(int index) const;
  std::string* _internal_add_str_data();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Data_Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control > ctrl_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > numerical_data_;
  mutable std::atomic<int> _numerical_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class Remote_Commands :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Remote_Commands) */ {
 public:
  Remote_Commands();
  virtual ~Remote_Commands();

  Remote_Commands(const Remote_Commands& from);
  Remote_Commands(Remote_Commands&& from) noexcept
    : Remote_Commands() {
    *this = ::std::move(from);
  }

  inline Remote_Commands& operator=(const Remote_Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Remote_Commands& operator=(Remote_Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Remote_Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Remote_Commands* internal_default_instance() {
    return reinterpret_cast<const Remote_Commands*>(
               &_Remote_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Remote_Commands& a, Remote_Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Remote_Commands* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Remote_Commands* New() const final {
    return CreateMaybeMessage<Remote_Commands>(nullptr);
  }

  Remote_Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Remote_Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Remote_Commands& from);
  void MergeFrom(const Remote_Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Remote_Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Remote_Commands";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fcommands_2eproto);
    return ::descriptor_table_remote_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlFieldNumber = 1,
    kCdataFieldNumber = 2,
    kCustCtrlFieldNumber = 3,
    kTaskFieldNumber = 4,
    kRequestFieldNumber = 5,
    kToInitFieldNumber = 6,
  };
  // .Control ctrl = 1;
  bool has_ctrl() const;
  private:
  bool _internal_has_ctrl() const;
  public:
  void clear_ctrl();
  const ::Control& ctrl() const;
  ::Control* release_ctrl();
  ::Control* mutable_ctrl();
  void set_allocated_ctrl(::Control* ctrl);
  private:
  const ::Control& _internal_ctrl() const;
  ::Control* _internal_mutable_ctrl();
  public:

  // .Data_Send cdata = 2;
  bool has_cdata() const;
  private:
  bool _internal_has_cdata() const;
  public:
  void clear_cdata();
  const ::Data_Send& cdata() const;
  ::Data_Send* release_cdata();
  ::Data_Send* mutable_cdata();
  void set_allocated_cdata(::Data_Send* cdata);
  private:
  const ::Data_Send& _internal_cdata() const;
  ::Data_Send* _internal_mutable_cdata();
  public:

  // .Custom_Control cust_ctrl = 3;
  bool has_cust_ctrl() const;
  private:
  bool _internal_has_cust_ctrl() const;
  public:
  void clear_cust_ctrl();
  const ::Custom_Control& cust_ctrl() const;
  ::Custom_Control* release_cust_ctrl();
  ::Custom_Control* mutable_cust_ctrl();
  void set_allocated_cust_ctrl(::Custom_Control* cust_ctrl);
  private:
  const ::Custom_Control& _internal_cust_ctrl() const;
  ::Custom_Control* _internal_mutable_cust_ctrl();
  public:

  // .Custom_Task task = 4;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::Custom_Task& task() const;
  ::Custom_Task* release_task();
  ::Custom_Task* mutable_task();
  void set_allocated_task(::Custom_Task* task);
  private:
  const ::Custom_Task& _internal_task() const;
  ::Custom_Task* _internal_mutable_task();
  public:

  // .Data_Request request = 5;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::Data_Request& request() const;
  ::Data_Request* release_request();
  ::Data_Request* mutable_request();
  void set_allocated_request(::Data_Request* request);
  private:
  const ::Data_Request& _internal_request() const;
  ::Data_Request* _internal_mutable_request();
  public:

  // .Static_Data to_init = 6;
  bool has_to_init() const;
  private:
  bool _internal_has_to_init() const;
  public:
  void clear_to_init();
  const ::Static_Data& to_init() const;
  ::Static_Data* release_to_init();
  ::Static_Data* mutable_to_init();
  void set_allocated_to_init(::Static_Data* to_init);
  private:
  const ::Static_Data& _internal_to_init() const;
  ::Static_Data* _internal_mutable_to_init();
  public:

  // @@protoc_insertion_point(class_scope:Remote_Commands)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Control* ctrl_;
  ::Data_Send* cdata_;
  ::Custom_Control* cust_ctrl_;
  ::Custom_Task* task_;
  ::Data_Request* request_;
  ::Static_Data* to_init_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2D

// float x = 1;
inline void Vec2D::clear_x() {
  x_ = 0;
}
inline float Vec2D::_internal_x() const {
  return x_;
}
inline float Vec2D::x() const {
  // @@protoc_insertion_point(field_get:Vec2D.x)
  return _internal_x();
}
inline void Vec2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vec2D.x)
}

// float y = 2;
inline void Vec2D::clear_y() {
  y_ = 0;
}
inline float Vec2D::_internal_y() const {
  return y_;
}
inline float Vec2D::y() const {
  // @@protoc_insertion_point(field_get:Vec2D.y)
  return _internal_y();
}
inline void Vec2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vec2D.y)
}

// -------------------------------------------------------------------

// Polygon

// repeated .Vec2D vertices = 1;
inline int Polygon::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Polygon::vertices_size() const {
  return _internal_vertices_size();
}
inline void Polygon::clear_vertices() {
  vertices_.Clear();
}
inline ::Vec2D* Polygon::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:Polygon.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >*
Polygon::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:Polygon.vertices)
  return &vertices_;
}
inline const ::Vec2D& Polygon::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::Vec2D& Polygon::vertices(int index) const {
  // @@protoc_insertion_point(field_get:Polygon.vertices)
  return _internal_vertices(index);
}
inline ::Vec2D* Polygon::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::Vec2D* Polygon::add_vertices() {
  // @@protoc_insertion_point(field_add:Polygon.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >&
Polygon::vertices() const {
  // @@protoc_insertion_point(field_list:Polygon.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// Static_Data

// .Polygon play_area = 1;
inline bool Static_Data::_internal_has_play_area() const {
  return this != internal_default_instance() && play_area_ != nullptr;
}
inline bool Static_Data::has_play_area() const {
  return _internal_has_play_area();
}
inline void Static_Data::clear_play_area() {
  if (GetArenaNoVirtual() == nullptr && play_area_ != nullptr) {
    delete play_area_;
  }
  play_area_ = nullptr;
}
inline const ::Polygon& Static_Data::_internal_play_area() const {
  const ::Polygon* p = play_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Polygon*>(
      &::_Polygon_default_instance_);
}
inline const ::Polygon& Static_Data::play_area() const {
  // @@protoc_insertion_point(field_get:Static_Data.play_area)
  return _internal_play_area();
}
inline ::Polygon* Static_Data::release_play_area() {
  // @@protoc_insertion_point(field_release:Static_Data.play_area)
  
  ::Polygon* temp = play_area_;
  play_area_ = nullptr;
  return temp;
}
inline ::Polygon* Static_Data::_internal_mutable_play_area() {
  
  if (play_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::Polygon>(GetArenaNoVirtual());
    play_area_ = p;
  }
  return play_area_;
}
inline ::Polygon* Static_Data::mutable_play_area() {
  // @@protoc_insertion_point(field_mutable:Static_Data.play_area)
  return _internal_mutable_play_area();
}
inline void Static_Data::set_allocated_play_area(::Polygon* play_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete play_area_;
  }
  if (play_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      play_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play_area, submessage_arena);
    }
    
  } else {
    
  }
  play_area_ = play_area;
  // @@protoc_insertion_point(field_set_allocated:Static_Data.play_area)
}

// .Polygon penalty_area = 2;
inline bool Static_Data::_internal_has_penalty_area() const {
  return this != internal_default_instance() && penalty_area_ != nullptr;
}
inline bool Static_Data::has_penalty_area() const {
  return _internal_has_penalty_area();
}
inline void Static_Data::clear_penalty_area() {
  if (GetArenaNoVirtual() == nullptr && penalty_area_ != nullptr) {
    delete penalty_area_;
  }
  penalty_area_ = nullptr;
}
inline const ::Polygon& Static_Data::_internal_penalty_area() const {
  const ::Polygon* p = penalty_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Polygon*>(
      &::_Polygon_default_instance_);
}
inline const ::Polygon& Static_Data::penalty_area() const {
  // @@protoc_insertion_point(field_get:Static_Data.penalty_area)
  return _internal_penalty_area();
}
inline ::Polygon* Static_Data::release_penalty_area() {
  // @@protoc_insertion_point(field_release:Static_Data.penalty_area)
  
  ::Polygon* temp = penalty_area_;
  penalty_area_ = nullptr;
  return temp;
}
inline ::Polygon* Static_Data::_internal_mutable_penalty_area() {
  
  if (penalty_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::Polygon>(GetArenaNoVirtual());
    penalty_area_ = p;
  }
  return penalty_area_;
}
inline ::Polygon* Static_Data::mutable_penalty_area() {
  // @@protoc_insertion_point(field_mutable:Static_Data.penalty_area)
  return _internal_mutable_penalty_area();
}
inline void Static_Data::set_allocated_penalty_area(::Polygon* penalty_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete penalty_area_;
  }
  if (penalty_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      penalty_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, penalty_area, submessage_arena);
    }
    
  } else {
    
  }
  penalty_area_ = penalty_area;
  // @@protoc_insertion_point(field_set_allocated:Static_Data.penalty_area)
}

// .Polygon center_circle = 3;
inline bool Static_Data::_internal_has_center_circle() const {
  return this != internal_default_instance() && center_circle_ != nullptr;
}
inline bool Static_Data::has_center_circle() const {
  return _internal_has_center_circle();
}
inline void Static_Data::clear_center_circle() {
  if (GetArenaNoVirtual() == nullptr && center_circle_ != nullptr) {
    delete center_circle_;
  }
  center_circle_ = nullptr;
}
inline const ::Polygon& Static_Data::_internal_center_circle() const {
  const ::Polygon* p = center_circle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Polygon*>(
      &::_Polygon_default_instance_);
}
inline const ::Polygon& Static_Data::center_circle() const {
  // @@protoc_insertion_point(field_get:Static_Data.center_circle)
  return _internal_center_circle();
}
inline ::Polygon* Static_Data::release_center_circle() {
  // @@protoc_insertion_point(field_release:Static_Data.center_circle)
  
  ::Polygon* temp = center_circle_;
  center_circle_ = nullptr;
  return temp;
}
inline ::Polygon* Static_Data::_internal_mutable_center_circle() {
  
  if (center_circle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Polygon>(GetArenaNoVirtual());
    center_circle_ = p;
  }
  return center_circle_;
}
inline ::Polygon* Static_Data::mutable_center_circle() {
  // @@protoc_insertion_point(field_mutable:Static_Data.center_circle)
  return _internal_mutable_center_circle();
}
inline void Static_Data::set_allocated_center_circle(::Polygon* center_circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_circle_;
  }
  if (center_circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center_circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_circle, submessage_arena);
    }
    
  } else {
    
  }
  center_circle_ = center_circle;
  // @@protoc_insertion_point(field_set_allocated:Static_Data.center_circle)
}

// .Polygon center_line = 4;
inline bool Static_Data::_internal_has_center_line() const {
  return this != internal_default_instance() && center_line_ != nullptr;
}
inline bool Static_Data::has_center_line() const {
  return _internal_has_center_line();
}
inline void Static_Data::clear_center_line() {
  if (GetArenaNoVirtual() == nullptr && center_line_ != nullptr) {
    delete center_line_;
  }
  center_line_ = nullptr;
}
inline const ::Polygon& Static_Data::_internal_center_line() const {
  const ::Polygon* p = center_line_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Polygon*>(
      &::_Polygon_default_instance_);
}
inline const ::Polygon& Static_Data::center_line() const {
  // @@protoc_insertion_point(field_get:Static_Data.center_line)
  return _internal_center_line();
}
inline ::Polygon* Static_Data::release_center_line() {
  // @@protoc_insertion_point(field_release:Static_Data.center_line)
  
  ::Polygon* temp = center_line_;
  center_line_ = nullptr;
  return temp;
}
inline ::Polygon* Static_Data::_internal_mutable_center_line() {
  
  if (center_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::Polygon>(GetArenaNoVirtual());
    center_line_ = p;
  }
  return center_line_;
}
inline ::Polygon* Static_Data::mutable_center_line() {
  // @@protoc_insertion_point(field_mutable:Static_Data.center_line)
  return _internal_mutable_center_line();
}
inline void Static_Data::set_allocated_center_line(::Polygon* center_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_line_;
  }
  if (center_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_line, submessage_arena);
    }
    
  } else {
    
  }
  center_line_ = center_line;
  // @@protoc_insertion_point(field_set_allocated:Static_Data.center_line)
}

// .Polygon cross_bar = 5;
inline bool Static_Data::_internal_has_cross_bar() const {
  return this != internal_default_instance() && cross_bar_ != nullptr;
}
inline bool Static_Data::has_cross_bar() const {
  return _internal_has_cross_bar();
}
inline void Static_Data::clear_cross_bar() {
  if (GetArenaNoVirtual() == nullptr && cross_bar_ != nullptr) {
    delete cross_bar_;
  }
  cross_bar_ = nullptr;
}
inline const ::Polygon& Static_Data::_internal_cross_bar() const {
  const ::Polygon* p = cross_bar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Polygon*>(
      &::_Polygon_default_instance_);
}
inline const ::Polygon& Static_Data::cross_bar() const {
  // @@protoc_insertion_point(field_get:Static_Data.cross_bar)
  return _internal_cross_bar();
}
inline ::Polygon* Static_Data::release_cross_bar() {
  // @@protoc_insertion_point(field_release:Static_Data.cross_bar)
  
  ::Polygon* temp = cross_bar_;
  cross_bar_ = nullptr;
  return temp;
}
inline ::Polygon* Static_Data::_internal_mutable_cross_bar() {
  
  if (cross_bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::Polygon>(GetArenaNoVirtual());
    cross_bar_ = p;
  }
  return cross_bar_;
}
inline ::Polygon* Static_Data::mutable_cross_bar() {
  // @@protoc_insertion_point(field_mutable:Static_Data.cross_bar)
  return _internal_mutable_cross_bar();
}
inline void Static_Data::set_allocated_cross_bar(::Polygon* cross_bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cross_bar_;
  }
  if (cross_bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cross_bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross_bar, submessage_arena);
    }
    
  } else {
    
  }
  cross_bar_ = cross_bar;
  // @@protoc_insertion_point(field_set_allocated:Static_Data.cross_bar)
}

// int32 num_robots = 6;
inline void Static_Data::clear_num_robots() {
  num_robots_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Static_Data::_internal_num_robots() const {
  return num_robots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Static_Data::num_robots() const {
  // @@protoc_insertion_point(field_get:Static_Data.num_robots)
  return _internal_num_robots();
}
inline void Static_Data::_internal_set_num_robots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_robots_ = value;
}
inline void Static_Data::set_num_robots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_robots(value);
  // @@protoc_insertion_point(field_set:Static_Data.num_robots)
}

// -------------------------------------------------------------------

// Control

// .Vec2D velocity = 1;
inline bool Control::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool Control::has_velocity() const {
  return _internal_has_velocity();
}
inline void Control::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::Vec2D& Control::_internal_velocity() const {
  const ::Vec2D* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vec2D*>(
      &::_Vec2D_default_instance_);
}
inline const ::Vec2D& Control::velocity() const {
  // @@protoc_insertion_point(field_get:Control.velocity)
  return _internal_velocity();
}
inline ::Vec2D* Control::release_velocity() {
  // @@protoc_insertion_point(field_release:Control.velocity)
  
  ::Vec2D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::Vec2D* Control::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec2D>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::Vec2D* Control::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:Control.velocity)
  return _internal_mutable_velocity();
}
inline void Control::set_allocated_velocity(::Vec2D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Control.velocity)
}

// float angular_velocity = 2;
inline void Control::clear_angular_velocity() {
  angular_velocity_ = 0;
}
inline float Control::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline float Control::angular_velocity() const {
  // @@protoc_insertion_point(field_get:Control.angular_velocity)
  return _internal_angular_velocity();
}
inline void Control::_internal_set_angular_velocity(float value) {
  
  angular_velocity_ = value;
}
inline void Control::set_angular_velocity(float value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:Control.angular_velocity)
}

// float dribbler_pwr = 3;
inline void Control::clear_dribbler_pwr() {
  dribbler_pwr_ = 0;
}
inline float Control::_internal_dribbler_pwr() const {
  return dribbler_pwr_;
}
inline float Control::dribbler_pwr() const {
  // @@protoc_insertion_point(field_get:Control.dribbler_pwr)
  return _internal_dribbler_pwr();
}
inline void Control::_internal_set_dribbler_pwr(float value) {
  
  dribbler_pwr_ = value;
}
inline void Control::set_dribbler_pwr(float value) {
  _internal_set_dribbler_pwr(value);
  // @@protoc_insertion_point(field_set:Control.dribbler_pwr)
}

// float kicker_pwr = 4;
inline void Control::clear_kicker_pwr() {
  kicker_pwr_ = 0;
}
inline float Control::_internal_kicker_pwr() const {
  return kicker_pwr_;
}
inline float Control::kicker_pwr() const {
  // @@protoc_insertion_point(field_get:Control.kicker_pwr)
  return _internal_kicker_pwr();
}
inline void Control::_internal_set_kicker_pwr(float value) {
  
  kicker_pwr_ = value;
}
inline void Control::set_kicker_pwr(float value) {
  _internal_set_kicker_pwr(value);
  // @@protoc_insertion_point(field_set:Control.kicker_pwr)
}

// float chippping_pwr = 5;
inline void Control::clear_chippping_pwr() {
  chippping_pwr_ = 0;
}
inline float Control::_internal_chippping_pwr() const {
  return chippping_pwr_;
}
inline float Control::chippping_pwr() const {
  // @@protoc_insertion_point(field_get:Control.chippping_pwr)
  return _internal_chippping_pwr();
}
inline void Control::_internal_set_chippping_pwr(float value) {
  
  chippping_pwr_ = value;
}
inline void Control::set_chippping_pwr(float value) {
  _internal_set_chippping_pwr(value);
  // @@protoc_insertion_point(field_set:Control.chippping_pwr)
}

// -------------------------------------------------------------------

// Data_Send

// .Vec2D ball_location = 1;
inline bool Data_Send::_internal_has_ball_location() const {
  return this != internal_default_instance() && ball_location_ != nullptr;
}
inline bool Data_Send::has_ball_location() const {
  return _internal_has_ball_location();
}
inline void Data_Send::clear_ball_location() {
  if (GetArenaNoVirtual() == nullptr && ball_location_ != nullptr) {
    delete ball_location_;
  }
  ball_location_ = nullptr;
}
inline const ::Vec2D& Data_Send::_internal_ball_location() const {
  const ::Vec2D* p = ball_location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vec2D*>(
      &::_Vec2D_default_instance_);
}
inline const ::Vec2D& Data_Send::ball_location() const {
  // @@protoc_insertion_point(field_get:Data_Send.ball_location)
  return _internal_ball_location();
}
inline ::Vec2D* Data_Send::release_ball_location() {
  // @@protoc_insertion_point(field_release:Data_Send.ball_location)
  
  ::Vec2D* temp = ball_location_;
  ball_location_ = nullptr;
  return temp;
}
inline ::Vec2D* Data_Send::_internal_mutable_ball_location() {
  
  if (ball_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vec2D>(GetArenaNoVirtual());
    ball_location_ = p;
  }
  return ball_location_;
}
inline ::Vec2D* Data_Send::mutable_ball_location() {
  // @@protoc_insertion_point(field_mutable:Data_Send.ball_location)
  return _internal_mutable_ball_location();
}
inline void Data_Send::set_allocated_ball_location(::Vec2D* ball_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ball_location_;
  }
  if (ball_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ball_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_location, submessage_arena);
    }
    
  } else {
    
  }
  ball_location_ = ball_location;
  // @@protoc_insertion_point(field_set_allocated:Data_Send.ball_location)
}

// repeated .Vec2D robot_locations = 2;
inline int Data_Send::_internal_robot_locations_size() const {
  return robot_locations_.size();
}
inline int Data_Send::robot_locations_size() const {
  return _internal_robot_locations_size();
}
inline void Data_Send::clear_robot_locations() {
  robot_locations_.Clear();
}
inline ::Vec2D* Data_Send::mutable_robot_locations(int index) {
  // @@protoc_insertion_point(field_mutable:Data_Send.robot_locations)
  return robot_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >*
Data_Send::mutable_robot_locations() {
  // @@protoc_insertion_point(field_mutable_list:Data_Send.robot_locations)
  return &robot_locations_;
}
inline const ::Vec2D& Data_Send::_internal_robot_locations(int index) const {
  return robot_locations_.Get(index);
}
inline const ::Vec2D& Data_Send::robot_locations(int index) const {
  // @@protoc_insertion_point(field_get:Data_Send.robot_locations)
  return _internal_robot_locations(index);
}
inline ::Vec2D* Data_Send::_internal_add_robot_locations() {
  return robot_locations_.Add();
}
inline ::Vec2D* Data_Send::add_robot_locations() {
  // @@protoc_insertion_point(field_add:Data_Send.robot_locations)
  return _internal_add_robot_locations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >&
Data_Send::robot_locations() const {
  // @@protoc_insertion_point(field_list:Data_Send.robot_locations)
  return robot_locations_;
}

// repeated float robot_orientations = 3;
inline int Data_Send::_internal_robot_orientations_size() const {
  return robot_orientations_.size();
}
inline int Data_Send::robot_orientations_size() const {
  return _internal_robot_orientations_size();
}
inline void Data_Send::clear_robot_orientations() {
  robot_orientations_.Clear();
}
inline float Data_Send::_internal_robot_orientations(int index) const {
  return robot_orientations_.Get(index);
}
inline float Data_Send::robot_orientations(int index) const {
  // @@protoc_insertion_point(field_get:Data_Send.robot_orientations)
  return _internal_robot_orientations(index);
}
inline void Data_Send::set_robot_orientations(int index, float value) {
  robot_orientations_.Set(index, value);
  // @@protoc_insertion_point(field_set:Data_Send.robot_orientations)
}
inline void Data_Send::_internal_add_robot_orientations(float value) {
  robot_orientations_.Add(value);
}
inline void Data_Send::add_robot_orientations(float value) {
  _internal_add_robot_orientations(value);
  // @@protoc_insertion_point(field_add:Data_Send.robot_orientations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data_Send::_internal_robot_orientations() const {
  return robot_orientations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data_Send::robot_orientations() const {
  // @@protoc_insertion_point(field_list:Data_Send.robot_orientations)
  return _internal_robot_orientations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data_Send::_internal_mutable_robot_orientations() {
  return &robot_orientations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data_Send::mutable_robot_orientations() {
  // @@protoc_insertion_point(field_mutable_list:Data_Send.robot_orientations)
  return _internal_mutable_robot_orientations();
}

// repeated .Vec2D robot_velocities = 4;
inline int Data_Send::_internal_robot_velocities_size() const {
  return robot_velocities_.size();
}
inline int Data_Send::robot_velocities_size() const {
  return _internal_robot_velocities_size();
}
inline void Data_Send::clear_robot_velocities() {
  robot_velocities_.Clear();
}
inline ::Vec2D* Data_Send::mutable_robot_velocities(int index) {
  // @@protoc_insertion_point(field_mutable:Data_Send.robot_velocities)
  return robot_velocities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >*
Data_Send::mutable_robot_velocities() {
  // @@protoc_insertion_point(field_mutable_list:Data_Send.robot_velocities)
  return &robot_velocities_;
}
inline const ::Vec2D& Data_Send::_internal_robot_velocities(int index) const {
  return robot_velocities_.Get(index);
}
inline const ::Vec2D& Data_Send::robot_velocities(int index) const {
  // @@protoc_insertion_point(field_get:Data_Send.robot_velocities)
  return _internal_robot_velocities(index);
}
inline ::Vec2D* Data_Send::_internal_add_robot_velocities() {
  return robot_velocities_.Add();
}
inline ::Vec2D* Data_Send::add_robot_velocities() {
  // @@protoc_insertion_point(field_add:Data_Send.robot_velocities)
  return _internal_add_robot_velocities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vec2D >&
Data_Send::robot_velocities() const {
  // @@protoc_insertion_point(field_list:Data_Send.robot_velocities)
  return robot_velocities_;
}

// -------------------------------------------------------------------

// Custom_Control

// string name = 1;
inline void Custom_Control::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Custom_Control::name() const {
  // @@protoc_insertion_point(field_get:Custom_Control.name)
  return _internal_name();
}
inline void Custom_Control::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Custom_Control.name)
}
inline std::string* Custom_Control::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Custom_Control.name)
  return _internal_mutable_name();
}
inline const std::string& Custom_Control::_internal_name() const {
  return name_.GetNoArena();
}
inline void Custom_Control::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Custom_Control::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Custom_Control.name)
}
inline void Custom_Control::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Custom_Control.name)
}
inline void Custom_Control::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Custom_Control.name)
}
inline std::string* Custom_Control::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Custom_Control::release_name() {
  // @@protoc_insertion_point(field_release:Custom_Control.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Custom_Control::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Custom_Control.name)
}

// repeated float numerical_params = 2;
inline int Custom_Control::_internal_numerical_params_size() const {
  return numerical_params_.size();
}
inline int Custom_Control::numerical_params_size() const {
  return _internal_numerical_params_size();
}
inline void Custom_Control::clear_numerical_params() {
  numerical_params_.Clear();
}
inline float Custom_Control::_internal_numerical_params(int index) const {
  return numerical_params_.Get(index);
}
inline float Custom_Control::numerical_params(int index) const {
  // @@protoc_insertion_point(field_get:Custom_Control.numerical_params)
  return _internal_numerical_params(index);
}
inline void Custom_Control::set_numerical_params(int index, float value) {
  numerical_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Custom_Control.numerical_params)
}
inline void Custom_Control::_internal_add_numerical_params(float value) {
  numerical_params_.Add(value);
}
inline void Custom_Control::add_numerical_params(float value) {
  _internal_add_numerical_params(value);
  // @@protoc_insertion_point(field_add:Custom_Control.numerical_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Custom_Control::_internal_numerical_params() const {
  return numerical_params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Custom_Control::numerical_params() const {
  // @@protoc_insertion_point(field_list:Custom_Control.numerical_params)
  return _internal_numerical_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Custom_Control::_internal_mutable_numerical_params() {
  return &numerical_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Custom_Control::mutable_numerical_params() {
  // @@protoc_insertion_point(field_mutable_list:Custom_Control.numerical_params)
  return _internal_mutable_numerical_params();
}

// -------------------------------------------------------------------

// Custom_Task

// string name = 1;
inline void Custom_Task::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Custom_Task::name() const {
  // @@protoc_insertion_point(field_get:Custom_Task.name)
  return _internal_name();
}
inline void Custom_Task::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Custom_Task.name)
}
inline std::string* Custom_Task::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Custom_Task.name)
  return _internal_mutable_name();
}
inline const std::string& Custom_Task::_internal_name() const {
  return name_.GetNoArena();
}
inline void Custom_Task::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Custom_Task::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Custom_Task.name)
}
inline void Custom_Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Custom_Task.name)
}
inline void Custom_Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Custom_Task.name)
}
inline std::string* Custom_Task::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Custom_Task::release_name() {
  // @@protoc_insertion_point(field_release:Custom_Task.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Custom_Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Custom_Task.name)
}

// repeated .Control ctrl_params = 2;
inline int Custom_Task::_internal_ctrl_params_size() const {
  return ctrl_params_.size();
}
inline int Custom_Task::ctrl_params_size() const {
  return _internal_ctrl_params_size();
}
inline void Custom_Task::clear_ctrl_params() {
  ctrl_params_.Clear();
}
inline ::Control* Custom_Task::mutable_ctrl_params(int index) {
  // @@protoc_insertion_point(field_mutable:Custom_Task.ctrl_params)
  return ctrl_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >*
Custom_Task::mutable_ctrl_params() {
  // @@protoc_insertion_point(field_mutable_list:Custom_Task.ctrl_params)
  return &ctrl_params_;
}
inline const ::Control& Custom_Task::_internal_ctrl_params(int index) const {
  return ctrl_params_.Get(index);
}
inline const ::Control& Custom_Task::ctrl_params(int index) const {
  // @@protoc_insertion_point(field_get:Custom_Task.ctrl_params)
  return _internal_ctrl_params(index);
}
inline ::Control* Custom_Task::_internal_add_ctrl_params() {
  return ctrl_params_.Add();
}
inline ::Control* Custom_Task::add_ctrl_params() {
  // @@protoc_insertion_point(field_add:Custom_Task.ctrl_params)
  return _internal_add_ctrl_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >&
Custom_Task::ctrl_params() const {
  // @@protoc_insertion_point(field_list:Custom_Task.ctrl_params)
  return ctrl_params_;
}

// repeated float numerical_params = 3;
inline int Custom_Task::_internal_numerical_params_size() const {
  return numerical_params_.size();
}
inline int Custom_Task::numerical_params_size() const {
  return _internal_numerical_params_size();
}
inline void Custom_Task::clear_numerical_params() {
  numerical_params_.Clear();
}
inline float Custom_Task::_internal_numerical_params(int index) const {
  return numerical_params_.Get(index);
}
inline float Custom_Task::numerical_params(int index) const {
  // @@protoc_insertion_point(field_get:Custom_Task.numerical_params)
  return _internal_numerical_params(index);
}
inline void Custom_Task::set_numerical_params(int index, float value) {
  numerical_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Custom_Task.numerical_params)
}
inline void Custom_Task::_internal_add_numerical_params(float value) {
  numerical_params_.Add(value);
}
inline void Custom_Task::add_numerical_params(float value) {
  _internal_add_numerical_params(value);
  // @@protoc_insertion_point(field_add:Custom_Task.numerical_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Custom_Task::_internal_numerical_params() const {
  return numerical_params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Custom_Task::numerical_params() const {
  // @@protoc_insertion_point(field_list:Custom_Task.numerical_params)
  return _internal_numerical_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Custom_Task::_internal_mutable_numerical_params() {
  return &numerical_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Custom_Task::mutable_numerical_params() {
  // @@protoc_insertion_point(field_mutable_list:Custom_Task.numerical_params)
  return _internal_mutable_numerical_params();
}

// repeated string str_params = 4;
inline int Custom_Task::_internal_str_params_size() const {
  return str_params_.size();
}
inline int Custom_Task::str_params_size() const {
  return _internal_str_params_size();
}
inline void Custom_Task::clear_str_params() {
  str_params_.Clear();
}
inline std::string* Custom_Task::add_str_params() {
  // @@protoc_insertion_point(field_add_mutable:Custom_Task.str_params)
  return _internal_add_str_params();
}
inline const std::string& Custom_Task::_internal_str_params(int index) const {
  return str_params_.Get(index);
}
inline const std::string& Custom_Task::str_params(int index) const {
  // @@protoc_insertion_point(field_get:Custom_Task.str_params)
  return _internal_str_params(index);
}
inline std::string* Custom_Task::mutable_str_params(int index) {
  // @@protoc_insertion_point(field_mutable:Custom_Task.str_params)
  return str_params_.Mutable(index);
}
inline void Custom_Task::set_str_params(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Custom_Task.str_params)
  str_params_.Mutable(index)->assign(value);
}
inline void Custom_Task::set_str_params(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Custom_Task.str_params)
  str_params_.Mutable(index)->assign(std::move(value));
}
inline void Custom_Task::set_str_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Custom_Task.str_params)
}
inline void Custom_Task::set_str_params(int index, const char* value, size_t size) {
  str_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Custom_Task.str_params)
}
inline std::string* Custom_Task::_internal_add_str_params() {
  return str_params_.Add();
}
inline void Custom_Task::add_str_params(const std::string& value) {
  str_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Custom_Task.str_params)
}
inline void Custom_Task::add_str_params(std::string&& value) {
  str_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Custom_Task.str_params)
}
inline void Custom_Task::add_str_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Custom_Task.str_params)
}
inline void Custom_Task::add_str_params(const char* value, size_t size) {
  str_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Custom_Task.str_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Custom_Task::str_params() const {
  // @@protoc_insertion_point(field_list:Custom_Task.str_params)
  return str_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Custom_Task::mutable_str_params() {
  // @@protoc_insertion_point(field_mutable_list:Custom_Task.str_params)
  return &str_params_;
}

// -------------------------------------------------------------------

// Data_Request

// string name = 1;
inline void Data_Request::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Data_Request::name() const {
  // @@protoc_insertion_point(field_get:Data_Request.name)
  return _internal_name();
}
inline void Data_Request::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Data_Request.name)
}
inline std::string* Data_Request::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Data_Request.name)
  return _internal_mutable_name();
}
inline const std::string& Data_Request::_internal_name() const {
  return name_.GetNoArena();
}
inline void Data_Request::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Data_Request::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Data_Request.name)
}
inline void Data_Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Data_Request.name)
}
inline void Data_Request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Data_Request.name)
}
inline std::string* Data_Request::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Data_Request::release_name() {
  // @@protoc_insertion_point(field_release:Data_Request.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Data_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Data_Request.name)
}

// repeated .Control ctrl_data = 2;
inline int Data_Request::_internal_ctrl_data_size() const {
  return ctrl_data_.size();
}
inline int Data_Request::ctrl_data_size() const {
  return _internal_ctrl_data_size();
}
inline void Data_Request::clear_ctrl_data() {
  ctrl_data_.Clear();
}
inline ::Control* Data_Request::mutable_ctrl_data(int index) {
  // @@protoc_insertion_point(field_mutable:Data_Request.ctrl_data)
  return ctrl_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >*
Data_Request::mutable_ctrl_data() {
  // @@protoc_insertion_point(field_mutable_list:Data_Request.ctrl_data)
  return &ctrl_data_;
}
inline const ::Control& Data_Request::_internal_ctrl_data(int index) const {
  return ctrl_data_.Get(index);
}
inline const ::Control& Data_Request::ctrl_data(int index) const {
  // @@protoc_insertion_point(field_get:Data_Request.ctrl_data)
  return _internal_ctrl_data(index);
}
inline ::Control* Data_Request::_internal_add_ctrl_data() {
  return ctrl_data_.Add();
}
inline ::Control* Data_Request::add_ctrl_data() {
  // @@protoc_insertion_point(field_add:Data_Request.ctrl_data)
  return _internal_add_ctrl_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Control >&
Data_Request::ctrl_data() const {
  // @@protoc_insertion_point(field_list:Data_Request.ctrl_data)
  return ctrl_data_;
}

// repeated float numerical_data = 3;
inline int Data_Request::_internal_numerical_data_size() const {
  return numerical_data_.size();
}
inline int Data_Request::numerical_data_size() const {
  return _internal_numerical_data_size();
}
inline void Data_Request::clear_numerical_data() {
  numerical_data_.Clear();
}
inline float Data_Request::_internal_numerical_data(int index) const {
  return numerical_data_.Get(index);
}
inline float Data_Request::numerical_data(int index) const {
  // @@protoc_insertion_point(field_get:Data_Request.numerical_data)
  return _internal_numerical_data(index);
}
inline void Data_Request::set_numerical_data(int index, float value) {
  numerical_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Data_Request.numerical_data)
}
inline void Data_Request::_internal_add_numerical_data(float value) {
  numerical_data_.Add(value);
}
inline void Data_Request::add_numerical_data(float value) {
  _internal_add_numerical_data(value);
  // @@protoc_insertion_point(field_add:Data_Request.numerical_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data_Request::_internal_numerical_data() const {
  return numerical_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Data_Request::numerical_data() const {
  // @@protoc_insertion_point(field_list:Data_Request.numerical_data)
  return _internal_numerical_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data_Request::_internal_mutable_numerical_data() {
  return &numerical_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Data_Request::mutable_numerical_data() {
  // @@protoc_insertion_point(field_mutable_list:Data_Request.numerical_data)
  return _internal_mutable_numerical_data();
}

// repeated string str_data = 4;
inline int Data_Request::_internal_str_data_size() const {
  return str_data_.size();
}
inline int Data_Request::str_data_size() const {
  return _internal_str_data_size();
}
inline void Data_Request::clear_str_data() {
  str_data_.Clear();
}
inline std::string* Data_Request::add_str_data() {
  // @@protoc_insertion_point(field_add_mutable:Data_Request.str_data)
  return _internal_add_str_data();
}
inline const std::string& Data_Request::_internal_str_data(int index) const {
  return str_data_.Get(index);
}
inline const std::string& Data_Request::str_data(int index) const {
  // @@protoc_insertion_point(field_get:Data_Request.str_data)
  return _internal_str_data(index);
}
inline std::string* Data_Request::mutable_str_data(int index) {
  // @@protoc_insertion_point(field_mutable:Data_Request.str_data)
  return str_data_.Mutable(index);
}
inline void Data_Request::set_str_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Data_Request.str_data)
  str_data_.Mutable(index)->assign(value);
}
inline void Data_Request::set_str_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Data_Request.str_data)
  str_data_.Mutable(index)->assign(std::move(value));
}
inline void Data_Request::set_str_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Data_Request.str_data)
}
inline void Data_Request::set_str_data(int index, const char* value, size_t size) {
  str_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data_Request.str_data)
}
inline std::string* Data_Request::_internal_add_str_data() {
  return str_data_.Add();
}
inline void Data_Request::add_str_data(const std::string& value) {
  str_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Data_Request.str_data)
}
inline void Data_Request::add_str_data(std::string&& value) {
  str_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Data_Request.str_data)
}
inline void Data_Request::add_str_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Data_Request.str_data)
}
inline void Data_Request::add_str_data(const char* value, size_t size) {
  str_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Data_Request.str_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Data_Request::str_data() const {
  // @@protoc_insertion_point(field_list:Data_Request.str_data)
  return str_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Data_Request::mutable_str_data() {
  // @@protoc_insertion_point(field_mutable_list:Data_Request.str_data)
  return &str_data_;
}

// -------------------------------------------------------------------

// Remote_Commands

// .Control ctrl = 1;
inline bool Remote_Commands::_internal_has_ctrl() const {
  return this != internal_default_instance() && ctrl_ != nullptr;
}
inline bool Remote_Commands::has_ctrl() const {
  return _internal_has_ctrl();
}
inline void Remote_Commands::clear_ctrl() {
  if (GetArenaNoVirtual() == nullptr && ctrl_ != nullptr) {
    delete ctrl_;
  }
  ctrl_ = nullptr;
}
inline const ::Control& Remote_Commands::_internal_ctrl() const {
  const ::Control* p = ctrl_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Control*>(
      &::_Control_default_instance_);
}
inline const ::Control& Remote_Commands::ctrl() const {
  // @@protoc_insertion_point(field_get:Remote_Commands.ctrl)
  return _internal_ctrl();
}
inline ::Control* Remote_Commands::release_ctrl() {
  // @@protoc_insertion_point(field_release:Remote_Commands.ctrl)
  
  ::Control* temp = ctrl_;
  ctrl_ = nullptr;
  return temp;
}
inline ::Control* Remote_Commands::_internal_mutable_ctrl() {
  
  if (ctrl_ == nullptr) {
    auto* p = CreateMaybeMessage<::Control>(GetArenaNoVirtual());
    ctrl_ = p;
  }
  return ctrl_;
}
inline ::Control* Remote_Commands::mutable_ctrl() {
  // @@protoc_insertion_point(field_mutable:Remote_Commands.ctrl)
  return _internal_mutable_ctrl();
}
inline void Remote_Commands::set_allocated_ctrl(::Control* ctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ctrl_;
  }
  if (ctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctrl, submessage_arena);
    }
    
  } else {
    
  }
  ctrl_ = ctrl;
  // @@protoc_insertion_point(field_set_allocated:Remote_Commands.ctrl)
}

// .Data_Send cdata = 2;
inline bool Remote_Commands::_internal_has_cdata() const {
  return this != internal_default_instance() && cdata_ != nullptr;
}
inline bool Remote_Commands::has_cdata() const {
  return _internal_has_cdata();
}
inline void Remote_Commands::clear_cdata() {
  if (GetArenaNoVirtual() == nullptr && cdata_ != nullptr) {
    delete cdata_;
  }
  cdata_ = nullptr;
}
inline const ::Data_Send& Remote_Commands::_internal_cdata() const {
  const ::Data_Send* p = cdata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Data_Send*>(
      &::_Data_Send_default_instance_);
}
inline const ::Data_Send& Remote_Commands::cdata() const {
  // @@protoc_insertion_point(field_get:Remote_Commands.cdata)
  return _internal_cdata();
}
inline ::Data_Send* Remote_Commands::release_cdata() {
  // @@protoc_insertion_point(field_release:Remote_Commands.cdata)
  
  ::Data_Send* temp = cdata_;
  cdata_ = nullptr;
  return temp;
}
inline ::Data_Send* Remote_Commands::_internal_mutable_cdata() {
  
  if (cdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Data_Send>(GetArenaNoVirtual());
    cdata_ = p;
  }
  return cdata_;
}
inline ::Data_Send* Remote_Commands::mutable_cdata() {
  // @@protoc_insertion_point(field_mutable:Remote_Commands.cdata)
  return _internal_mutable_cdata();
}
inline void Remote_Commands::set_allocated_cdata(::Data_Send* cdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cdata_;
  }
  if (cdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdata, submessage_arena);
    }
    
  } else {
    
  }
  cdata_ = cdata;
  // @@protoc_insertion_point(field_set_allocated:Remote_Commands.cdata)
}

// .Custom_Control cust_ctrl = 3;
inline bool Remote_Commands::_internal_has_cust_ctrl() const {
  return this != internal_default_instance() && cust_ctrl_ != nullptr;
}
inline bool Remote_Commands::has_cust_ctrl() const {
  return _internal_has_cust_ctrl();
}
inline void Remote_Commands::clear_cust_ctrl() {
  if (GetArenaNoVirtual() == nullptr && cust_ctrl_ != nullptr) {
    delete cust_ctrl_;
  }
  cust_ctrl_ = nullptr;
}
inline const ::Custom_Control& Remote_Commands::_internal_cust_ctrl() const {
  const ::Custom_Control* p = cust_ctrl_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Custom_Control*>(
      &::_Custom_Control_default_instance_);
}
inline const ::Custom_Control& Remote_Commands::cust_ctrl() const {
  // @@protoc_insertion_point(field_get:Remote_Commands.cust_ctrl)
  return _internal_cust_ctrl();
}
inline ::Custom_Control* Remote_Commands::release_cust_ctrl() {
  // @@protoc_insertion_point(field_release:Remote_Commands.cust_ctrl)
  
  ::Custom_Control* temp = cust_ctrl_;
  cust_ctrl_ = nullptr;
  return temp;
}
inline ::Custom_Control* Remote_Commands::_internal_mutable_cust_ctrl() {
  
  if (cust_ctrl_ == nullptr) {
    auto* p = CreateMaybeMessage<::Custom_Control>(GetArenaNoVirtual());
    cust_ctrl_ = p;
  }
  return cust_ctrl_;
}
inline ::Custom_Control* Remote_Commands::mutable_cust_ctrl() {
  // @@protoc_insertion_point(field_mutable:Remote_Commands.cust_ctrl)
  return _internal_mutable_cust_ctrl();
}
inline void Remote_Commands::set_allocated_cust_ctrl(::Custom_Control* cust_ctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cust_ctrl_;
  }
  if (cust_ctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cust_ctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cust_ctrl, submessage_arena);
    }
    
  } else {
    
  }
  cust_ctrl_ = cust_ctrl;
  // @@protoc_insertion_point(field_set_allocated:Remote_Commands.cust_ctrl)
}

// .Custom_Task task = 4;
inline bool Remote_Commands::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool Remote_Commands::has_task() const {
  return _internal_has_task();
}
inline void Remote_Commands::clear_task() {
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::Custom_Task& Remote_Commands::_internal_task() const {
  const ::Custom_Task* p = task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Custom_Task*>(
      &::_Custom_Task_default_instance_);
}
inline const ::Custom_Task& Remote_Commands::task() const {
  // @@protoc_insertion_point(field_get:Remote_Commands.task)
  return _internal_task();
}
inline ::Custom_Task* Remote_Commands::release_task() {
  // @@protoc_insertion_point(field_release:Remote_Commands.task)
  
  ::Custom_Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::Custom_Task* Remote_Commands::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::Custom_Task>(GetArenaNoVirtual());
    task_ = p;
  }
  return task_;
}
inline ::Custom_Task* Remote_Commands::mutable_task() {
  // @@protoc_insertion_point(field_mutable:Remote_Commands.task)
  return _internal_mutable_task();
}
inline void Remote_Commands::set_allocated_task(::Custom_Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:Remote_Commands.task)
}

// .Data_Request request = 5;
inline bool Remote_Commands::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool Remote_Commands::has_request() const {
  return _internal_has_request();
}
inline void Remote_Commands::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::Data_Request& Remote_Commands::_internal_request() const {
  const ::Data_Request* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Data_Request*>(
      &::_Data_Request_default_instance_);
}
inline const ::Data_Request& Remote_Commands::request() const {
  // @@protoc_insertion_point(field_get:Remote_Commands.request)
  return _internal_request();
}
inline ::Data_Request* Remote_Commands::release_request() {
  // @@protoc_insertion_point(field_release:Remote_Commands.request)
  
  ::Data_Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::Data_Request* Remote_Commands::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::Data_Request>(GetArenaNoVirtual());
    request_ = p;
  }
  return request_;
}
inline ::Data_Request* Remote_Commands::mutable_request() {
  // @@protoc_insertion_point(field_mutable:Remote_Commands.request)
  return _internal_mutable_request();
}
inline void Remote_Commands::set_allocated_request(::Data_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:Remote_Commands.request)
}

// .Static_Data to_init = 6;
inline bool Remote_Commands::_internal_has_to_init() const {
  return this != internal_default_instance() && to_init_ != nullptr;
}
inline bool Remote_Commands::has_to_init() const {
  return _internal_has_to_init();
}
inline void Remote_Commands::clear_to_init() {
  if (GetArenaNoVirtual() == nullptr && to_init_ != nullptr) {
    delete to_init_;
  }
  to_init_ = nullptr;
}
inline const ::Static_Data& Remote_Commands::_internal_to_init() const {
  const ::Static_Data* p = to_init_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Static_Data*>(
      &::_Static_Data_default_instance_);
}
inline const ::Static_Data& Remote_Commands::to_init() const {
  // @@protoc_insertion_point(field_get:Remote_Commands.to_init)
  return _internal_to_init();
}
inline ::Static_Data* Remote_Commands::release_to_init() {
  // @@protoc_insertion_point(field_release:Remote_Commands.to_init)
  
  ::Static_Data* temp = to_init_;
  to_init_ = nullptr;
  return temp;
}
inline ::Static_Data* Remote_Commands::_internal_mutable_to_init() {
  
  if (to_init_ == nullptr) {
    auto* p = CreateMaybeMessage<::Static_Data>(GetArenaNoVirtual());
    to_init_ = p;
  }
  return to_init_;
}
inline ::Static_Data* Remote_Commands::mutable_to_init() {
  // @@protoc_insertion_point(field_mutable:Remote_Commands.to_init)
  return _internal_mutable_to_init();
}
inline void Remote_Commands::set_allocated_to_init(::Static_Data* to_init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_init_;
  }
  if (to_init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to_init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_init, submessage_arena);
    }
    
  } else {
    
  }
  to_init_ = to_init;
  // @@protoc_insertion_point(field_set_allocated:Remote_Commands.to_init)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remote_5fcommands_2eproto
