// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_commands.proto

#include "remote_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Control_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Custom_Control_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Custom_Task_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_Request_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_Send_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Static_Data_remote_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2D_remote_5fcommands_2eproto;
class Vec2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2D> _instance;
} _Vec2D_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class Static_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Static_Data> _instance;
} _Static_Data_default_instance_;
class ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Control> _instance;
} _Control_default_instance_;
class Data_SendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data_Send> _instance;
} _Data_Send_default_instance_;
class Custom_ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Custom_Control> _instance;
} _Custom_Control_default_instance_;
class Custom_TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Custom_Task> _instance;
} _Custom_Task_default_instance_;
class Data_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data_Request> _instance;
} _Data_Request_default_instance_;
class Remote_CommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Remote_Commands> _instance;
} _Remote_Commands_default_instance_;
static void InitDefaultsscc_info_Control_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Control_default_instance_;
    new (ptr) ::Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Control::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Control_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Control_remote_5fcommands_2eproto}, {
      &scc_info_Vec2D_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Custom_Control_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Custom_Control_default_instance_;
    new (ptr) ::Custom_Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Custom_Control::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Custom_Control_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Custom_Control_remote_5fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Custom_Task_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Custom_Task_default_instance_;
    new (ptr) ::Custom_Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Custom_Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Custom_Task_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Custom_Task_remote_5fcommands_2eproto}, {
      &scc_info_Control_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Data_Request_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Data_Request_default_instance_;
    new (ptr) ::Data_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Data_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_Request_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Data_Request_remote_5fcommands_2eproto}, {
      &scc_info_Control_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Data_Send_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Data_Send_default_instance_;
    new (ptr) ::Data_Send();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Data_Send::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Data_Send_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Data_Send_remote_5fcommands_2eproto}, {
      &scc_info_Vec2D_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Polygon_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Polygon_default_instance_;
    new (ptr) ::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_remote_5fcommands_2eproto}, {
      &scc_info_Vec2D_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Remote_Commands_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Remote_Commands_default_instance_;
    new (ptr) ::Remote_Commands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Remote_Commands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Remote_Commands_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Remote_Commands_remote_5fcommands_2eproto}, {
      &scc_info_Control_remote_5fcommands_2eproto.base,
      &scc_info_Data_Send_remote_5fcommands_2eproto.base,
      &scc_info_Custom_Control_remote_5fcommands_2eproto.base,
      &scc_info_Custom_Task_remote_5fcommands_2eproto.base,
      &scc_info_Data_Request_remote_5fcommands_2eproto.base,
      &scc_info_Static_Data_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Static_Data_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Static_Data_default_instance_;
    new (ptr) ::Static_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Static_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Static_Data_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Static_Data_remote_5fcommands_2eproto}, {
      &scc_info_Polygon_remote_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Vec2D_remote_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vec2D_default_instance_;
    new (ptr) ::Vec2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2D_remote_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec2D_remote_5fcommands_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_remote_5fcommands_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_remote_5fcommands_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_remote_5fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_remote_5fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vec2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vec2D, x_),
  PROTOBUF_FIELD_OFFSET(::Vec2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Polygon, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Static_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Static_Data, play_area_),
  PROTOBUF_FIELD_OFFSET(::Static_Data, penalty_area_),
  PROTOBUF_FIELD_OFFSET(::Static_Data, center_circle_),
  PROTOBUF_FIELD_OFFSET(::Static_Data, center_line_),
  PROTOBUF_FIELD_OFFSET(::Static_Data, cross_bar_),
  PROTOBUF_FIELD_OFFSET(::Static_Data, num_robots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Control, velocity_),
  PROTOBUF_FIELD_OFFSET(::Control, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::Control, dribbler_pwr_),
  PROTOBUF_FIELD_OFFSET(::Control, kicker_pwr_),
  PROTOBUF_FIELD_OFFSET(::Control, chippping_pwr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Data_Send, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Data_Send, ball_location_),
  PROTOBUF_FIELD_OFFSET(::Data_Send, robot_locations_),
  PROTOBUF_FIELD_OFFSET(::Data_Send, robot_orientations_),
  PROTOBUF_FIELD_OFFSET(::Data_Send, robot_velocities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Custom_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Custom_Control, name_),
  PROTOBUF_FIELD_OFFSET(::Custom_Control, numerical_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Custom_Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Custom_Task, name_),
  PROTOBUF_FIELD_OFFSET(::Custom_Task, ctrl_params_),
  PROTOBUF_FIELD_OFFSET(::Custom_Task, numerical_params_),
  PROTOBUF_FIELD_OFFSET(::Custom_Task, str_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Data_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Data_Request, name_),
  PROTOBUF_FIELD_OFFSET(::Data_Request, ctrl_data_),
  PROTOBUF_FIELD_OFFSET(::Data_Request, numerical_data_),
  PROTOBUF_FIELD_OFFSET(::Data_Request, str_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, ctrl_),
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, cdata_),
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, cust_ctrl_),
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, task_),
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, request_),
  PROTOBUF_FIELD_OFFSET(::Remote_Commands, to_init_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Vec2D)},
  { 7, -1, sizeof(::Polygon)},
  { 13, -1, sizeof(::Static_Data)},
  { 24, -1, sizeof(::Control)},
  { 34, -1, sizeof(::Data_Send)},
  { 43, -1, sizeof(::Custom_Control)},
  { 50, -1, sizeof(::Custom_Task)},
  { 59, -1, sizeof(::Data_Request)},
  { 68, -1, sizeof(::Remote_Commands)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vec2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Static_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Data_Send_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Custom_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Custom_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Data_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Remote_Commands_default_instance_),
};

const char descriptor_table_protodef_remote_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025remote_commands.proto\"\035\n\005Vec2D\022\t\n\001x\030\001 "
  "\001(\002\022\t\n\001y\030\002 \001(\002\"#\n\007Polygon\022\030\n\010vertices\030\001 "
  "\003(\0132\006.Vec2D\"\273\001\n\013Static_Data\022\033\n\tplay_area"
  "\030\001 \001(\0132\010.Polygon\022\036\n\014penalty_area\030\002 \001(\0132\010"
  ".Polygon\022\037\n\rcenter_circle\030\003 \001(\0132\010.Polygo"
  "n\022\035\n\013center_line\030\004 \001(\0132\010.Polygon\022\033\n\tcros"
  "s_bar\030\005 \001(\0132\010.Polygon\022\022\n\nnum_robots\030\006 \001("
  "\005\"~\n\007Control\022\030\n\010velocity\030\001 \001(\0132\006.Vec2D\022\030"
  "\n\020angular_velocity\030\002 \001(\002\022\024\n\014dribbler_pwr"
  "\030\003 \001(\002\022\022\n\nkicker_pwr\030\004 \001(\002\022\025\n\rchippping_"
  "pwr\030\005 \001(\002\"\211\001\n\tData_Send\022\035\n\rball_location"
  "\030\001 \001(\0132\006.Vec2D\022\037\n\017robot_locations\030\002 \003(\0132"
  "\006.Vec2D\022\032\n\022robot_orientations\030\003 \003(\002\022 \n\020r"
  "obot_velocities\030\004 \003(\0132\006.Vec2D\"8\n\016Custom_"
  "Control\022\014\n\004name\030\001 \001(\t\022\030\n\020numerical_param"
  "s\030\002 \003(\002\"h\n\013Custom_Task\022\014\n\004name\030\001 \001(\t\022\035\n\013"
  "ctrl_params\030\002 \003(\0132\010.Control\022\030\n\020numerical"
  "_params\030\003 \003(\002\022\022\n\nstr_params\030\004 \003(\t\"c\n\014Dat"
  "a_Request\022\014\n\004name\030\001 \001(\t\022\033\n\tctrl_data\030\002 \003"
  "(\0132\010.Control\022\026\n\016numerical_data\030\003 \003(\002\022\020\n\010"
  "str_data\030\004 \003(\t\"\303\001\n\017Remote_Commands\022\026\n\004ct"
  "rl\030\001 \001(\0132\010.Control\022\031\n\005cdata\030\002 \001(\0132\n.Data"
  "_Send\022\"\n\tcust_ctrl\030\003 \001(\0132\017.Custom_Contro"
  "l\022\032\n\004task\030\004 \001(\0132\014.Custom_Task\022\036\n\007request"
  "\030\005 \001(\0132\r.Data_Request\022\035\n\007to_init\030\006 \001(\0132\014"
  ".Static_DataB\007\n\005Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_remote_5fcommands_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_remote_5fcommands_2eproto_sccs[9] = {
  &scc_info_Control_remote_5fcommands_2eproto.base,
  &scc_info_Custom_Control_remote_5fcommands_2eproto.base,
  &scc_info_Custom_Task_remote_5fcommands_2eproto.base,
  &scc_info_Data_Request_remote_5fcommands_2eproto.base,
  &scc_info_Data_Send_remote_5fcommands_2eproto.base,
  &scc_info_Polygon_remote_5fcommands_2eproto.base,
  &scc_info_Remote_Commands_remote_5fcommands_2eproto.base,
  &scc_info_Static_Data_remote_5fcommands_2eproto.base,
  &scc_info_Vec2D_remote_5fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_remote_5fcommands_2eproto_once;
static bool descriptor_table_remote_5fcommands_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_5fcommands_2eproto = {
  &descriptor_table_remote_5fcommands_2eproto_initialized, descriptor_table_protodef_remote_5fcommands_2eproto, "remote_commands.proto", 1029,
  &descriptor_table_remote_5fcommands_2eproto_once, descriptor_table_remote_5fcommands_2eproto_sccs, descriptor_table_remote_5fcommands_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_remote_5fcommands_2eproto::offsets,
  file_level_metadata_remote_5fcommands_2eproto, 9, file_level_enum_descriptors_remote_5fcommands_2eproto, file_level_service_descriptors_remote_5fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_5fcommands_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_remote_5fcommands_2eproto), true);

// ===================================================================

void Vec2D::InitAsDefaultInstance() {
}
class Vec2D::_Internal {
 public:
};

Vec2D::Vec2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vec2D)
}
Vec2D::Vec2D(const Vec2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vec2D)
}

void Vec2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2D::~Vec2D() {
  // @@protoc_insertion_point(destructor:Vec2D)
  SharedDtor();
}

void Vec2D::SharedDtor() {
}

void Vec2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2D& Vec2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2D_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Vec2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* Vec2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vec2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec2D)
  return target;
}

size_t Vec2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec2D)
    MergeFrom(*source);
  }
}

void Vec2D::MergeFrom(const Vec2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vec2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2D::CopyFrom(const Vec2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2D::IsInitialized() const {
  return true;
}

void Vec2D::InternalSwap(Vec2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_remote_5fcommands_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Vec2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Vec2D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Vec2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Static_Data::InitAsDefaultInstance() {
  ::_Static_Data_default_instance_._instance.get_mutable()->play_area_ = const_cast< ::Polygon*>(
      ::Polygon::internal_default_instance());
  ::_Static_Data_default_instance_._instance.get_mutable()->penalty_area_ = const_cast< ::Polygon*>(
      ::Polygon::internal_default_instance());
  ::_Static_Data_default_instance_._instance.get_mutable()->center_circle_ = const_cast< ::Polygon*>(
      ::Polygon::internal_default_instance());
  ::_Static_Data_default_instance_._instance.get_mutable()->center_line_ = const_cast< ::Polygon*>(
      ::Polygon::internal_default_instance());
  ::_Static_Data_default_instance_._instance.get_mutable()->cross_bar_ = const_cast< ::Polygon*>(
      ::Polygon::internal_default_instance());
}
class Static_Data::_Internal {
 public:
  static const ::Polygon& play_area(const Static_Data* msg);
  static const ::Polygon& penalty_area(const Static_Data* msg);
  static const ::Polygon& center_circle(const Static_Data* msg);
  static const ::Polygon& center_line(const Static_Data* msg);
  static const ::Polygon& cross_bar(const Static_Data* msg);
};

const ::Polygon&
Static_Data::_Internal::play_area(const Static_Data* msg) {
  return *msg->play_area_;
}
const ::Polygon&
Static_Data::_Internal::penalty_area(const Static_Data* msg) {
  return *msg->penalty_area_;
}
const ::Polygon&
Static_Data::_Internal::center_circle(const Static_Data* msg) {
  return *msg->center_circle_;
}
const ::Polygon&
Static_Data::_Internal::center_line(const Static_Data* msg) {
  return *msg->center_line_;
}
const ::Polygon&
Static_Data::_Internal::cross_bar(const Static_Data* msg) {
  return *msg->cross_bar_;
}
Static_Data::Static_Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Static_Data)
}
Static_Data::Static_Data(const Static_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_play_area()) {
    play_area_ = new ::Polygon(*from.play_area_);
  } else {
    play_area_ = nullptr;
  }
  if (from._internal_has_penalty_area()) {
    penalty_area_ = new ::Polygon(*from.penalty_area_);
  } else {
    penalty_area_ = nullptr;
  }
  if (from._internal_has_center_circle()) {
    center_circle_ = new ::Polygon(*from.center_circle_);
  } else {
    center_circle_ = nullptr;
  }
  if (from._internal_has_center_line()) {
    center_line_ = new ::Polygon(*from.center_line_);
  } else {
    center_line_ = nullptr;
  }
  if (from._internal_has_cross_bar()) {
    cross_bar_ = new ::Polygon(*from.cross_bar_);
  } else {
    cross_bar_ = nullptr;
  }
  num_robots_ = from.num_robots_;
  // @@protoc_insertion_point(copy_constructor:Static_Data)
}

void Static_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Static_Data_remote_5fcommands_2eproto.base);
  ::memset(&play_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_robots_) -
      reinterpret_cast<char*>(&play_area_)) + sizeof(num_robots_));
}

Static_Data::~Static_Data() {
  // @@protoc_insertion_point(destructor:Static_Data)
  SharedDtor();
}

void Static_Data::SharedDtor() {
  if (this != internal_default_instance()) delete play_area_;
  if (this != internal_default_instance()) delete penalty_area_;
  if (this != internal_default_instance()) delete center_circle_;
  if (this != internal_default_instance()) delete center_line_;
  if (this != internal_default_instance()) delete cross_bar_;
}

void Static_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Static_Data& Static_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Static_Data_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Static_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Static_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && play_area_ != nullptr) {
    delete play_area_;
  }
  play_area_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && penalty_area_ != nullptr) {
    delete penalty_area_;
  }
  penalty_area_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && center_circle_ != nullptr) {
    delete center_circle_;
  }
  center_circle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && center_line_ != nullptr) {
    delete center_line_;
  }
  center_line_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cross_bar_ != nullptr) {
    delete cross_bar_;
  }
  cross_bar_ = nullptr;
  num_robots_ = 0;
  _internal_metadata_.Clear();
}

const char* Static_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Polygon play_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_play_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Polygon penalty_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_penalty_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Polygon center_circle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_circle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Polygon center_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Polygon cross_bar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross_bar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_robots = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_robots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Static_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Static_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Polygon play_area = 1;
  if (this->has_play_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::play_area(this), target, stream);
  }

  // .Polygon penalty_area = 2;
  if (this->has_penalty_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::penalty_area(this), target, stream);
  }

  // .Polygon center_circle = 3;
  if (this->has_center_circle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::center_circle(this), target, stream);
  }

  // .Polygon center_line = 4;
  if (this->has_center_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::center_line(this), target, stream);
  }

  // .Polygon cross_bar = 5;
  if (this->has_cross_bar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cross_bar(this), target, stream);
  }

  // int32 num_robots = 6;
  if (this->num_robots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_robots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Static_Data)
  return target;
}

size_t Static_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Static_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Polygon play_area = 1;
  if (this->has_play_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *play_area_);
  }

  // .Polygon penalty_area = 2;
  if (this->has_penalty_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *penalty_area_);
  }

  // .Polygon center_circle = 3;
  if (this->has_center_circle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_circle_);
  }

  // .Polygon center_line = 4;
  if (this->has_center_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_line_);
  }

  // .Polygon cross_bar = 5;
  if (this->has_cross_bar()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cross_bar_);
  }

  // int32 num_robots = 6;
  if (this->num_robots() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_robots());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Static_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Static_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Static_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Static_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Static_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Static_Data)
    MergeFrom(*source);
  }
}

void Static_Data::MergeFrom(const Static_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Static_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_play_area()) {
    _internal_mutable_play_area()->::Polygon::MergeFrom(from._internal_play_area());
  }
  if (from.has_penalty_area()) {
    _internal_mutable_penalty_area()->::Polygon::MergeFrom(from._internal_penalty_area());
  }
  if (from.has_center_circle()) {
    _internal_mutable_center_circle()->::Polygon::MergeFrom(from._internal_center_circle());
  }
  if (from.has_center_line()) {
    _internal_mutable_center_line()->::Polygon::MergeFrom(from._internal_center_line());
  }
  if (from.has_cross_bar()) {
    _internal_mutable_cross_bar()->::Polygon::MergeFrom(from._internal_cross_bar());
  }
  if (from.num_robots() != 0) {
    _internal_set_num_robots(from._internal_num_robots());
  }
}

void Static_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Static_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Static_Data::CopyFrom(const Static_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Static_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Static_Data::IsInitialized() const {
  return true;
}

void Static_Data::InternalSwap(Static_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(play_area_, other->play_area_);
  swap(penalty_area_, other->penalty_area_);
  swap(center_circle_, other->center_circle_);
  swap(center_line_, other->center_line_);
  swap(cross_bar_, other->cross_bar_);
  swap(num_robots_, other->num_robots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Static_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Control::InitAsDefaultInstance() {
  ::_Control_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
}
class Control::_Internal {
 public:
  static const ::Vec2D& velocity(const Control* msg);
};

const ::Vec2D&
Control::_Internal::velocity(const Control* msg) {
  return *msg->velocity_;
}
Control::Control()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_velocity()) {
    velocity_ = new ::Vec2D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&angular_velocity_, &from.angular_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&chippping_pwr_) -
    reinterpret_cast<char*>(&angular_velocity_)) + sizeof(chippping_pwr_));
  // @@protoc_insertion_point(copy_constructor:Control)
}

void Control::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Control_remote_5fcommands_2eproto.base);
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chippping_pwr_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(chippping_pwr_));
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:Control)
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != internal_default_instance()) delete velocity_;
}

void Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Control& Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Control_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  ::memset(&angular_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chippping_pwr_) -
      reinterpret_cast<char*>(&angular_velocity_)) + sizeof(chippping_pwr_));
  _internal_metadata_.Clear();
}

const char* Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Vec2D velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angular_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dribbler_pwr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dribbler_pwr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kicker_pwr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          kicker_pwr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float chippping_pwr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          chippping_pwr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2D velocity = 1;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::velocity(this), target, stream);
  }

  // float angular_velocity = 2;
  if (!(this->angular_velocity() <= 0 && this->angular_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angular_velocity(), target);
  }

  // float dribbler_pwr = 3;
  if (!(this->dribbler_pwr() <= 0 && this->dribbler_pwr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dribbler_pwr(), target);
  }

  // float kicker_pwr = 4;
  if (!(this->kicker_pwr() <= 0 && this->kicker_pwr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_kicker_pwr(), target);
  }

  // float chippping_pwr = 5;
  if (!(this->chippping_pwr() <= 0 && this->chippping_pwr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_chippping_pwr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Control)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vec2D velocity = 1;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // float angular_velocity = 2;
  if (!(this->angular_velocity() <= 0 && this->angular_velocity() >= 0)) {
    total_size += 1 + 4;
  }

  // float dribbler_pwr = 3;
  if (!(this->dribbler_pwr() <= 0 && this->dribbler_pwr() >= 0)) {
    total_size += 1 + 4;
  }

  // float kicker_pwr = 4;
  if (!(this->kicker_pwr() <= 0 && this->kicker_pwr() >= 0)) {
    total_size += 1 + 4;
  }

  // float chippping_pwr = 5;
  if (!(this->chippping_pwr() <= 0 && this->chippping_pwr() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity()) {
    _internal_mutable_velocity()->::Vec2D::MergeFrom(from._internal_velocity());
  }
  if (!(from.angular_velocity() <= 0 && from.angular_velocity() >= 0)) {
    _internal_set_angular_velocity(from._internal_angular_velocity());
  }
  if (!(from.dribbler_pwr() <= 0 && from.dribbler_pwr() >= 0)) {
    _internal_set_dribbler_pwr(from._internal_dribbler_pwr());
  }
  if (!(from.kicker_pwr() <= 0 && from.kicker_pwr() >= 0)) {
    _internal_set_kicker_pwr(from._internal_kicker_pwr());
  }
  if (!(from.chippping_pwr() <= 0 && from.chippping_pwr() >= 0)) {
    _internal_set_chippping_pwr(from._internal_chippping_pwr());
  }
}

void Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velocity_, other->velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(dribbler_pwr_, other->dribbler_pwr_);
  swap(kicker_pwr_, other->kicker_pwr_);
  swap(chippping_pwr_, other->chippping_pwr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data_Send::InitAsDefaultInstance() {
  ::_Data_Send_default_instance_._instance.get_mutable()->ball_location_ = const_cast< ::Vec2D*>(
      ::Vec2D::internal_default_instance());
}
class Data_Send::_Internal {
 public:
  static const ::Vec2D& ball_location(const Data_Send* msg);
};

const ::Vec2D&
Data_Send::_Internal::ball_location(const Data_Send* msg) {
  return *msg->ball_location_;
}
Data_Send::Data_Send()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data_Send)
}
Data_Send::Data_Send(const Data_Send& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      robot_locations_(from.robot_locations_),
      robot_orientations_(from.robot_orientations_),
      robot_velocities_(from.robot_velocities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ball_location()) {
    ball_location_ = new ::Vec2D(*from.ball_location_);
  } else {
    ball_location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Data_Send)
}

void Data_Send::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_Send_remote_5fcommands_2eproto.base);
  ball_location_ = nullptr;
}

Data_Send::~Data_Send() {
  // @@protoc_insertion_point(destructor:Data_Send)
  SharedDtor();
}

void Data_Send::SharedDtor() {
  if (this != internal_default_instance()) delete ball_location_;
}

void Data_Send::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data_Send& Data_Send::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_Send_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Data_Send::Clear() {
// @@protoc_insertion_point(message_clear_start:Data_Send)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_locations_.Clear();
  robot_orientations_.Clear();
  robot_velocities_.Clear();
  if (GetArenaNoVirtual() == nullptr && ball_location_ != nullptr) {
    delete ball_location_;
  }
  ball_location_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Data_Send::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Vec2D ball_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Vec2D robot_locations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float robot_orientations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_robot_orientations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_robot_orientations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Vec2D robot_velocities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_velocities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_Send::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Data_Send)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2D ball_location = 1;
  if (this->has_ball_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ball_location(this), target, stream);
  }

  // repeated .Vec2D robot_locations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_robot_locations(i), target, stream);
  }

  // repeated float robot_orientations = 3;
  if (this->_internal_robot_orientations_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_robot_orientations(), target);
  }

  // repeated .Vec2D robot_velocities = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_velocities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_robot_velocities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data_Send)
  return target;
}

size_t Data_Send::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data_Send)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Vec2D robot_locations = 2;
  total_size += 1UL * this->_internal_robot_locations_size();
  for (const auto& msg : this->robot_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float robot_orientations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_robot_orientations_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _robot_orientations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Vec2D robot_velocities = 4;
  total_size += 1UL * this->_internal_robot_velocities_size();
  for (const auto& msg : this->robot_velocities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Vec2D ball_location = 1;
  if (this->has_ball_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_Send::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data_Send)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_Send* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_Send>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data_Send)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data_Send)
    MergeFrom(*source);
  }
}

void Data_Send::MergeFrom(const Data_Send& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data_Send)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_locations_.MergeFrom(from.robot_locations_);
  robot_orientations_.MergeFrom(from.robot_orientations_);
  robot_velocities_.MergeFrom(from.robot_velocities_);
  if (from.has_ball_location()) {
    _internal_mutable_ball_location()->::Vec2D::MergeFrom(from._internal_ball_location());
  }
}

void Data_Send::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data_Send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Send::CopyFrom(const Data_Send& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data_Send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Send::IsInitialized() const {
  return true;
}

void Data_Send::InternalSwap(Data_Send* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  robot_locations_.InternalSwap(&other->robot_locations_);
  robot_orientations_.InternalSwap(&other->robot_orientations_);
  robot_velocities_.InternalSwap(&other->robot_velocities_);
  swap(ball_location_, other->ball_location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_Send::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Custom_Control::InitAsDefaultInstance() {
}
class Custom_Control::_Internal {
 public:
};

Custom_Control::Custom_Control()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Custom_Control)
}
Custom_Control::Custom_Control(const Custom_Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      numerical_params_(from.numerical_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Custom_Control)
}

void Custom_Control::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Custom_Control_remote_5fcommands_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Custom_Control::~Custom_Control() {
  // @@protoc_insertion_point(destructor:Custom_Control)
  SharedDtor();
}

void Custom_Control::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Custom_Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Custom_Control& Custom_Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Custom_Control_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Custom_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:Custom_Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numerical_params_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Custom_Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Custom_Control.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float numerical_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_numerical_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_numerical_params(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Custom_Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Custom_Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Custom_Control.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated float numerical_params = 2;
  if (this->_internal_numerical_params_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_numerical_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Custom_Control)
  return target;
}

size_t Custom_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Custom_Control)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float numerical_params = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_numerical_params_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numerical_params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Custom_Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Custom_Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Custom_Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Custom_Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Custom_Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Custom_Control)
    MergeFrom(*source);
  }
}

void Custom_Control::MergeFrom(const Custom_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Custom_Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numerical_params_.MergeFrom(from.numerical_params_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Custom_Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Custom_Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Custom_Control::CopyFrom(const Custom_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Custom_Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Custom_Control::IsInitialized() const {
  return true;
}

void Custom_Control::InternalSwap(Custom_Control* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  numerical_params_.InternalSwap(&other->numerical_params_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Custom_Control::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Custom_Task::InitAsDefaultInstance() {
}
class Custom_Task::_Internal {
 public:
};

Custom_Task::Custom_Task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Custom_Task)
}
Custom_Task::Custom_Task(const Custom_Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ctrl_params_(from.ctrl_params_),
      numerical_params_(from.numerical_params_),
      str_params_(from.str_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Custom_Task)
}

void Custom_Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Custom_Task_remote_5fcommands_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Custom_Task::~Custom_Task() {
  // @@protoc_insertion_point(destructor:Custom_Task)
  SharedDtor();
}

void Custom_Task::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Custom_Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Custom_Task& Custom_Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Custom_Task_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Custom_Task::Clear() {
// @@protoc_insertion_point(message_clear_start:Custom_Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_params_.Clear();
  numerical_params_.Clear();
  str_params_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Custom_Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Custom_Task.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Control ctrl_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float numerical_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_numerical_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_numerical_params(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string str_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str_params();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Custom_Task.str_params"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Custom_Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Custom_Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Custom_Task.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .Control ctrl_params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ctrl_params(i), target, stream);
  }

  // repeated float numerical_params = 3;
  if (this->_internal_numerical_params_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_numerical_params(), target);
  }

  // repeated string str_params = 4;
  for (int i = 0, n = this->_internal_str_params_size(); i < n; i++) {
    const auto& s = this->_internal_str_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Custom_Task.str_params");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Custom_Task)
  return target;
}

size_t Custom_Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Custom_Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Control ctrl_params = 2;
  total_size += 1UL * this->_internal_ctrl_params_size();
  for (const auto& msg : this->ctrl_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float numerical_params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_numerical_params_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numerical_params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string str_params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(str_params_.size());
  for (int i = 0, n = str_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      str_params_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Custom_Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Custom_Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Custom_Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Custom_Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Custom_Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Custom_Task)
    MergeFrom(*source);
  }
}

void Custom_Task::MergeFrom(const Custom_Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Custom_Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrl_params_.MergeFrom(from.ctrl_params_);
  numerical_params_.MergeFrom(from.numerical_params_);
  str_params_.MergeFrom(from.str_params_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Custom_Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Custom_Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Custom_Task::CopyFrom(const Custom_Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Custom_Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Custom_Task::IsInitialized() const {
  return true;
}

void Custom_Task::InternalSwap(Custom_Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ctrl_params_.InternalSwap(&other->ctrl_params_);
  numerical_params_.InternalSwap(&other->numerical_params_);
  str_params_.InternalSwap(&other->str_params_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Custom_Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Data_Request::InitAsDefaultInstance() {
}
class Data_Request::_Internal {
 public:
};

Data_Request::Data_Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data_Request)
}
Data_Request::Data_Request(const Data_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ctrl_data_(from.ctrl_data_),
      numerical_data_(from.numerical_data_),
      str_data_(from.str_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Data_Request)
}

void Data_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_Request_remote_5fcommands_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Data_Request::~Data_Request() {
  // @@protoc_insertion_point(destructor:Data_Request)
  SharedDtor();
}

void Data_Request::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Data_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data_Request& Data_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_Request_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Data_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Data_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_data_.Clear();
  numerical_data_.Clear();
  str_data_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Data_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Data_Request.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Control ctrl_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ctrl_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float numerical_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_numerical_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_numerical_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string str_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Data_Request.str_data"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Data_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Data_Request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .Control ctrl_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ctrl_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ctrl_data(i), target, stream);
  }

  // repeated float numerical_data = 3;
  if (this->_internal_numerical_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_numerical_data(), target);
  }

  // repeated string str_data = 4;
  for (int i = 0, n = this->_internal_str_data_size(); i < n; i++) {
    const auto& s = this->_internal_str_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Data_Request.str_data");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Data_Request)
  return target;
}

size_t Data_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Control ctrl_data = 2;
  total_size += 1UL * this->_internal_ctrl_data_size();
  for (const auto& msg : this->ctrl_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float numerical_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_numerical_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numerical_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string str_data = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(str_data_.size());
  for (int i = 0, n = str_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      str_data_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data_Request)
    MergeFrom(*source);
  }
}

void Data_Request::MergeFrom(const Data_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ctrl_data_.MergeFrom(from.ctrl_data_);
  numerical_data_.MergeFrom(from.numerical_data_);
  str_data_.MergeFrom(from.str_data_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Data_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Request::CopyFrom(const Data_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Request::IsInitialized() const {
  return true;
}

void Data_Request::InternalSwap(Data_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ctrl_data_.InternalSwap(&other->ctrl_data_);
  numerical_data_.InternalSwap(&other->numerical_data_);
  str_data_.InternalSwap(&other->str_data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Remote_Commands::InitAsDefaultInstance() {
  ::_Remote_Commands_default_instance_._instance.get_mutable()->ctrl_ = const_cast< ::Control*>(
      ::Control::internal_default_instance());
  ::_Remote_Commands_default_instance_._instance.get_mutable()->cdata_ = const_cast< ::Data_Send*>(
      ::Data_Send::internal_default_instance());
  ::_Remote_Commands_default_instance_._instance.get_mutable()->cust_ctrl_ = const_cast< ::Custom_Control*>(
      ::Custom_Control::internal_default_instance());
  ::_Remote_Commands_default_instance_._instance.get_mutable()->task_ = const_cast< ::Custom_Task*>(
      ::Custom_Task::internal_default_instance());
  ::_Remote_Commands_default_instance_._instance.get_mutable()->request_ = const_cast< ::Data_Request*>(
      ::Data_Request::internal_default_instance());
  ::_Remote_Commands_default_instance_._instance.get_mutable()->to_init_ = const_cast< ::Static_Data*>(
      ::Static_Data::internal_default_instance());
}
class Remote_Commands::_Internal {
 public:
  static const ::Control& ctrl(const Remote_Commands* msg);
  static const ::Data_Send& cdata(const Remote_Commands* msg);
  static const ::Custom_Control& cust_ctrl(const Remote_Commands* msg);
  static const ::Custom_Task& task(const Remote_Commands* msg);
  static const ::Data_Request& request(const Remote_Commands* msg);
  static const ::Static_Data& to_init(const Remote_Commands* msg);
};

const ::Control&
Remote_Commands::_Internal::ctrl(const Remote_Commands* msg) {
  return *msg->ctrl_;
}
const ::Data_Send&
Remote_Commands::_Internal::cdata(const Remote_Commands* msg) {
  return *msg->cdata_;
}
const ::Custom_Control&
Remote_Commands::_Internal::cust_ctrl(const Remote_Commands* msg) {
  return *msg->cust_ctrl_;
}
const ::Custom_Task&
Remote_Commands::_Internal::task(const Remote_Commands* msg) {
  return *msg->task_;
}
const ::Data_Request&
Remote_Commands::_Internal::request(const Remote_Commands* msg) {
  return *msg->request_;
}
const ::Static_Data&
Remote_Commands::_Internal::to_init(const Remote_Commands* msg) {
  return *msg->to_init_;
}
Remote_Commands::Remote_Commands()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Remote_Commands)
}
Remote_Commands::Remote_Commands(const Remote_Commands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ctrl()) {
    ctrl_ = new ::Control(*from.ctrl_);
  } else {
    ctrl_ = nullptr;
  }
  if (from._internal_has_cdata()) {
    cdata_ = new ::Data_Send(*from.cdata_);
  } else {
    cdata_ = nullptr;
  }
  if (from._internal_has_cust_ctrl()) {
    cust_ctrl_ = new ::Custom_Control(*from.cust_ctrl_);
  } else {
    cust_ctrl_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::Custom_Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new ::Data_Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_to_init()) {
    to_init_ = new ::Static_Data(*from.to_init_);
  } else {
    to_init_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Remote_Commands)
}

void Remote_Commands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Remote_Commands_remote_5fcommands_2eproto.base);
  ::memset(&ctrl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_init_) -
      reinterpret_cast<char*>(&ctrl_)) + sizeof(to_init_));
}

Remote_Commands::~Remote_Commands() {
  // @@protoc_insertion_point(destructor:Remote_Commands)
  SharedDtor();
}

void Remote_Commands::SharedDtor() {
  if (this != internal_default_instance()) delete ctrl_;
  if (this != internal_default_instance()) delete cdata_;
  if (this != internal_default_instance()) delete cust_ctrl_;
  if (this != internal_default_instance()) delete task_;
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete to_init_;
}

void Remote_Commands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Remote_Commands& Remote_Commands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Remote_Commands_remote_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void Remote_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:Remote_Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ctrl_ != nullptr) {
    delete ctrl_;
  }
  ctrl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cdata_ != nullptr) {
    delete cdata_;
  }
  cdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cust_ctrl_ != nullptr) {
    delete cust_ctrl_;
  }
  cust_ctrl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_init_ != nullptr) {
    delete to_init_;
  }
  to_init_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Remote_Commands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Control ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctrl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Data_Send cdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Custom_Control cust_ctrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cust_ctrl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Custom_Task task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Data_Request request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Static_Data to_init = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Remote_Commands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Remote_Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Control ctrl = 1;
  if (this->has_ctrl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ctrl(this), target, stream);
  }

  // .Data_Send cdata = 2;
  if (this->has_cdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cdata(this), target, stream);
  }

  // .Custom_Control cust_ctrl = 3;
  if (this->has_cust_ctrl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cust_ctrl(this), target, stream);
  }

  // .Custom_Task task = 4;
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::task(this), target, stream);
  }

  // .Data_Request request = 5;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::request(this), target, stream);
  }

  // .Static_Data to_init = 6;
  if (this->has_to_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::to_init(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Remote_Commands)
  return target;
}

size_t Remote_Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Remote_Commands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Control ctrl = 1;
  if (this->has_ctrl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ctrl_);
  }

  // .Data_Send cdata = 2;
  if (this->has_cdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdata_);
  }

  // .Custom_Control cust_ctrl = 3;
  if (this->has_cust_ctrl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cust_ctrl_);
  }

  // .Custom_Task task = 4;
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // .Data_Request request = 5;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .Static_Data to_init = 6;
  if (this->has_to_init()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_init_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Remote_Commands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Remote_Commands)
  GOOGLE_DCHECK_NE(&from, this);
  const Remote_Commands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Remote_Commands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Remote_Commands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Remote_Commands)
    MergeFrom(*source);
  }
}

void Remote_Commands::MergeFrom(const Remote_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Remote_Commands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ctrl()) {
    _internal_mutable_ctrl()->::Control::MergeFrom(from._internal_ctrl());
  }
  if (from.has_cdata()) {
    _internal_mutable_cdata()->::Data_Send::MergeFrom(from._internal_cdata());
  }
  if (from.has_cust_ctrl()) {
    _internal_mutable_cust_ctrl()->::Custom_Control::MergeFrom(from._internal_cust_ctrl());
  }
  if (from.has_task()) {
    _internal_mutable_task()->::Custom_Task::MergeFrom(from._internal_task());
  }
  if (from.has_request()) {
    _internal_mutable_request()->::Data_Request::MergeFrom(from._internal_request());
  }
  if (from.has_to_init()) {
    _internal_mutable_to_init()->::Static_Data::MergeFrom(from._internal_to_init());
  }
}

void Remote_Commands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Remote_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Remote_Commands::CopyFrom(const Remote_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Remote_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Remote_Commands::IsInitialized() const {
  return true;
}

void Remote_Commands::InternalSwap(Remote_Commands* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ctrl_, other->ctrl_);
  swap(cdata_, other->cdata_);
  swap(cust_ctrl_, other->cust_ctrl_);
  swap(task_, other->task_);
  swap(request_, other->request_);
  swap(to_init_, other->to_init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Remote_Commands::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vec2D* Arena::CreateMaybeMessage< ::Vec2D >(Arena* arena) {
  return Arena::CreateInternal< ::Vec2D >(arena);
}
template<> PROTOBUF_NOINLINE ::Polygon* Arena::CreateMaybeMessage< ::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::Static_Data* Arena::CreateMaybeMessage< ::Static_Data >(Arena* arena) {
  return Arena::CreateInternal< ::Static_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::Control* Arena::CreateMaybeMessage< ::Control >(Arena* arena) {
  return Arena::CreateInternal< ::Control >(arena);
}
template<> PROTOBUF_NOINLINE ::Data_Send* Arena::CreateMaybeMessage< ::Data_Send >(Arena* arena) {
  return Arena::CreateInternal< ::Data_Send >(arena);
}
template<> PROTOBUF_NOINLINE ::Custom_Control* Arena::CreateMaybeMessage< ::Custom_Control >(Arena* arena) {
  return Arena::CreateInternal< ::Custom_Control >(arena);
}
template<> PROTOBUF_NOINLINE ::Custom_Task* Arena::CreateMaybeMessage< ::Custom_Task >(Arena* arena) {
  return Arena::CreateInternal< ::Custom_Task >(arena);
}
template<> PROTOBUF_NOINLINE ::Data_Request* Arena::CreateMaybeMessage< ::Data_Request >(Arena* arena) {
  return Arena::CreateInternal< ::Data_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Remote_Commands* Arena::CreateMaybeMessage< ::Remote_Commands >(Arena* arena) {
  return Arena::CreateInternal< ::Remote_Commands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
